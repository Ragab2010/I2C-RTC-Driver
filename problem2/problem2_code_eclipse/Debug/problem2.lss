
problem2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001ce2  00001d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800096  00800096  00001dac  2**0
                  ALLOC
  3 .stab         00002754  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001316  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005816  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005828  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 07 	call	0xf90	; 0xf90 <main>
      8a:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYRead>:
 *      Author: RAGAB
 */

#include "KEYPAD.h"

unsigned char KEYRead(){
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	6c 97       	sbiw	r28, 0x1c	; 28
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	unsigned char col , row;
	unsigned char keypad_matrix[ROW][COL]=
      a6:	8c e0       	ldi	r24, 0x0C	; 12
      a8:	e0 e6       	ldi	r30, 0x60	; 96
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	de 01       	movw	r26, r28
      ae:	51 96       	adiw	r26, 0x11	; 17
      b0:	01 90       	ld	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	8a 95       	dec	r24
      b6:	e1 f7       	brne	.-8      	; 0xb0 <KEYRead+0x1e>
			{'4','5','6'},
			{'7','8','9'},
			{'*','0','#'}};

while(1){
	for(col =0 ; col<COL ; col++)
      b8:	19 82       	std	Y+1, r1	; 0x01
      ba:	d6 c0       	rjmp	.+428    	; 0x268 <KEYRead+0x1d6>
		{
			KEYPAD_DDR  = (0b00010000<<col);
      bc:	81 e3       	ldi	r24, 0x31	; 49
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	29 81       	ldd	r18, Y+1	; 0x01
      c2:	42 2f       	mov	r20, r18
      c4:	50 e0       	ldi	r21, 0x00	; 0
      c6:	20 e1       	ldi	r18, 0x10	; 16
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <KEYRead+0x3e>
      cc:	22 0f       	add	r18, r18
      ce:	33 1f       	adc	r19, r19
      d0:	4a 95       	dec	r20
      d2:	e2 f7       	brpl	.-8      	; 0xcc <KEYRead+0x3a>
      d4:	fc 01       	movw	r30, r24
      d6:	20 83       	st	Z, r18
			KEYPAD_CTRL = (~(0b00010000<<col));
      d8:	82 e3       	ldi	r24, 0x32	; 50
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	29 81       	ldd	r18, Y+1	; 0x01
      de:	42 2f       	mov	r20, r18
      e0:	50 e0       	ldi	r21, 0x00	; 0
      e2:	20 e1       	ldi	r18, 0x10	; 16
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	02 c0       	rjmp	.+4      	; 0xec <KEYRead+0x5a>
      e8:	22 0f       	add	r18, r18
      ea:	33 1f       	adc	r19, r19
      ec:	4a 95       	dec	r20
      ee:	e2 f7       	brpl	.-8      	; 0xe8 <KEYRead+0x56>
      f0:	20 95       	com	r18
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	a0 ef       	ldi	r26, 0xF0	; 240
      fc:	b1 e4       	ldi	r27, 0x41	; 65
      fe:	8b 83       	std	Y+3, r24	; 0x03
     100:	9c 83       	std	Y+4, r25	; 0x04
     102:	ad 83       	std	Y+5, r26	; 0x05
     104:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	4a ef       	ldi	r20, 0xFA	; 250
     10c:	54 e4       	ldi	r21, 0x44	; 68
     10e:	6b 81       	ldd	r22, Y+3	; 0x03
     110:	7c 81       	ldd	r23, Y+4	; 0x04
     112:	8d 81       	ldd	r24, Y+5	; 0x05
     114:	9e 81       	ldd	r25, Y+6	; 0x06
     116:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     11a:	dc 01       	movw	r26, r24
     11c:	cb 01       	movw	r24, r22
     11e:	8f 83       	std	Y+7, r24	; 0x07
     120:	98 87       	std	Y+8, r25	; 0x08
     122:	a9 87       	std	Y+9, r26	; 0x09
     124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e8       	ldi	r20, 0x80	; 128
     12c:	5f e3       	ldi	r21, 0x3F	; 63
     12e:	6f 81       	ldd	r22, Y+7	; 0x07
     130:	78 85       	ldd	r23, Y+8	; 0x08
     132:	89 85       	ldd	r24, Y+9	; 0x09
     134:	9a 85       	ldd	r25, Y+10	; 0x0a
     136:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     13a:	88 23       	and	r24, r24
     13c:	2c f4       	brge	.+10     	; 0x148 <KEYRead+0xb6>
		__ticks = 1;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	9c 87       	std	Y+12, r25	; 0x0c
     144:	8b 87       	std	Y+11, r24	; 0x0b
     146:	3f c0       	rjmp	.+126    	; 0x1c6 <KEYRead+0x134>
	else if (__tmp > 65535)
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	3f ef       	ldi	r19, 0xFF	; 255
     14c:	4f e7       	ldi	r20, 0x7F	; 127
     14e:	57 e4       	ldi	r21, 0x47	; 71
     150:	6f 81       	ldd	r22, Y+7	; 0x07
     152:	78 85       	ldd	r23, Y+8	; 0x08
     154:	89 85       	ldd	r24, Y+9	; 0x09
     156:	9a 85       	ldd	r25, Y+10	; 0x0a
     158:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     15c:	18 16       	cp	r1, r24
     15e:	4c f5       	brge	.+82     	; 0x1b2 <KEYRead+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e2       	ldi	r20, 0x20	; 32
     166:	51 e4       	ldi	r21, 0x41	; 65
     168:	6b 81       	ldd	r22, Y+3	; 0x03
     16a:	7c 81       	ldd	r23, Y+4	; 0x04
     16c:	8d 81       	ldd	r24, Y+5	; 0x05
     16e:	9e 81       	ldd	r25, Y+6	; 0x06
     170:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	bc 01       	movw	r22, r24
     17a:	cd 01       	movw	r24, r26
     17c:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	9c 87       	std	Y+12, r25	; 0x0c
     186:	8b 87       	std	Y+11, r24	; 0x0b
     188:	0f c0       	rjmp	.+30     	; 0x1a8 <KEYRead+0x116>
     18a:	88 ec       	ldi	r24, 0xC8	; 200
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	9e 87       	std	Y+14, r25	; 0x0e
     190:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     192:	8d 85       	ldd	r24, Y+13	; 0x0d
     194:	9e 85       	ldd	r25, Y+14	; 0x0e
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <KEYRead+0x104>
     19a:	9e 87       	std	Y+14, r25	; 0x0e
     19c:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     19e:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	9c 87       	std	Y+12, r25	; 0x0c
     1a6:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     1aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ac:	89 2b       	or	r24, r25
     1ae:	69 f7       	brne	.-38     	; 0x18a <KEYRead+0xf8>
     1b0:	14 c0       	rjmp	.+40     	; 0x1da <KEYRead+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1b2:	6f 81       	ldd	r22, Y+7	; 0x07
     1b4:	78 85       	ldd	r23, Y+8	; 0x08
     1b6:	89 85       	ldd	r24, Y+9	; 0x09
     1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ba:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	9c 87       	std	Y+12, r25	; 0x0c
     1c4:	8b 87       	std	Y+11, r24	; 0x0b
     1c6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1ca:	98 8b       	std	Y+16, r25	; 0x10
     1cc:	8f 87       	std	Y+15, r24	; 0x0f
     1ce:	8f 85       	ldd	r24, Y+15	; 0x0f
     1d0:	98 89       	ldd	r25, Y+16	; 0x10
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <KEYRead+0x140>
     1d6:	98 8b       	std	Y+16, r25	; 0x10
     1d8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(30);
			for(row=0 ;row <ROW ; row++){
     1da:	1a 82       	std	Y+2, r1	; 0x02
     1dc:	3e c0       	rjmp	.+124    	; 0x25a <KEYRead+0x1c8>
				if(!(KEYPAD_PIN &(1<<row))){
     1de:	80 e3       	ldi	r24, 0x30	; 48
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	88 2f       	mov	r24, r24
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2a 81       	ldd	r18, Y+2	; 0x02
     1ec:	22 2f       	mov	r18, r18
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <KEYRead+0x164>
     1f2:	95 95       	asr	r25
     1f4:	87 95       	ror	r24
     1f6:	2a 95       	dec	r18
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <KEYRead+0x160>
     1fa:	81 70       	andi	r24, 0x01	; 1
     1fc:	99 27       	eor	r25, r25
     1fe:	89 2b       	or	r24, r25
     200:	49 f5       	brne	.+82     	; 0x254 <KEYRead+0x1c2>
					while(!(KEYPAD_PIN &(1<<row)));//polling to print one key
     202:	00 00       	nop
     204:	80 e3       	ldi	r24, 0x30	; 48
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z
     20c:	88 2f       	mov	r24, r24
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	2a 81       	ldd	r18, Y+2	; 0x02
     212:	22 2f       	mov	r18, r18
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <KEYRead+0x18a>
     218:	95 95       	asr	r25
     21a:	87 95       	ror	r24
     21c:	2a 95       	dec	r18
     21e:	e2 f7       	brpl	.-8      	; 0x218 <KEYRead+0x186>
     220:	81 70       	andi	r24, 0x01	; 1
     222:	99 27       	eor	r25, r25
     224:	89 2b       	or	r24, r25
     226:	71 f3       	breq	.-36     	; 0x204 <KEYRead+0x172>
					return keypad_matrix[row][col];
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	48 2f       	mov	r20, r24
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	c9 01       	movw	r24, r18
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	82 0f       	add	r24, r18
     23c:	93 1f       	adc	r25, r19
     23e:	9e 01       	movw	r18, r28
     240:	2f 5f       	subi	r18, 0xFF	; 255
     242:	3f 4f       	sbci	r19, 0xFF	; 255
     244:	82 0f       	add	r24, r18
     246:	93 1f       	adc	r25, r19
     248:	84 0f       	add	r24, r20
     24a:	95 1f       	adc	r25, r21
     24c:	40 96       	adiw	r24, 0x10	; 16
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	0f c0       	rjmp	.+30     	; 0x272 <KEYRead+0x1e0>
	for(col =0 ; col<COL ; col++)
		{
			KEYPAD_DDR  = (0b00010000<<col);
			KEYPAD_CTRL = (~(0b00010000<<col));
			_delay_ms(30);
			for(row=0 ;row <ROW ; row++){
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	8f 5f       	subi	r24, 0xFF	; 255
     258:	8a 83       	std	Y+2, r24	; 0x02
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	84 30       	cpi	r24, 0x04	; 4
     25e:	08 f4       	brcc	.+2      	; 0x262 <KEYRead+0x1d0>
     260:	be cf       	rjmp	.-132    	; 0x1de <KEYRead+0x14c>
			{'4','5','6'},
			{'7','8','9'},
			{'*','0','#'}};

while(1){
	for(col =0 ; col<COL ; col++)
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	08 f4       	brcc	.+2      	; 0x270 <KEYRead+0x1de>
     26e:	26 cf       	rjmp	.-436    	; 0xbc <KEYRead+0x2a>
				}

			}
		}

}
     270:	23 cf       	rjmp	.-442    	; 0xb8 <KEYRead+0x26>

}
     272:	6c 96       	adiw	r28, 0x1c	; 28
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <getTimeBCD>:

unsigned char getTimeBCD(){
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	00 d0       	rcall	.+0      	; 0x28a <getTimeBCD+0x6>
     28a:	1f 92       	push	r1
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
	unsigned char upperNibble , lowernibble, bcd;
	upperNibble =KEYRead();
     290:	0e 94 49 00 	call	0x92	; 0x92 <KEYRead>
     294:	89 83       	std	Y+1, r24	; 0x01
	LCD_displayCharacter(upperNibble);
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_displayCharacter>
	upperNibble &= 0x0F;
     2a0:	89 81       	ldd	r24, Y+1	; 0x01
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	89 83       	std	Y+1, r24	; 0x01
	lowernibble=KEYRead();
     2a6:	0e 94 49 00 	call	0x92	; 0x92 <KEYRead>
     2aa:	8a 83       	std	Y+2, r24	; 0x02
	LCD_displayCharacter(lowernibble);
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 09 07 	call	0xe12	; 0xe12 <LCD_displayCharacter>
	lowernibble &= 0x0F;
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	8a 83       	std	Y+2, r24	; 0x02
	bcd = (upperNibble << 4) + lowernibble;
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	98 2f       	mov	r25, r24
     2c0:	92 95       	swap	r25
     2c2:	90 7f       	andi	r25, 0xF0	; 240
     2c4:	8a 81       	ldd	r24, Y+2	; 0x02
     2c6:	89 0f       	add	r24, r25
     2c8:	8b 83       	std	Y+3, r24	; 0x03
	return bcd;
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <I2C_init>:
 *      Author:
 */

#include "i2c.h"

void I2C_init(){
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
	//Frequncy eqaul 100KHz
	TWBR = 0X47;
     2e0:	80 e2       	ldi	r24, 0x20	; 32
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	27 e4       	ldi	r18, 0x47	; 71
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
	TWSR = 0X00;
     2ea:	81 e2       	ldi	r24, 0x21	; 33
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	10 82       	st	Z, r1
	TWCR = 0x04;
     2f2:	86 e5       	ldi	r24, 0x56	; 86
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	24 e0       	ldi	r18, 0x04	; 4
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
	//TWPS1 TWPS0 = 00   -- no Prescaler

	TWCR = (1<<TWEN);  //Enable the TWI module
     2fc:	86 e5       	ldi	r24, 0x56	; 86
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	24 e0       	ldi	r18, 0x04	; 4
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18

}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <I2C_initSlave>:
void I2C_initSlave(unsigned char slaveAddr){
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1<<TWEN);  //Enable the TWI module FRIST IN SLAVE MODE
     318:	86 e5       	ldi	r24, 0x56	; 86
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	24 e0       	ldi	r18, 0x04	; 4
     31e:	fc 01       	movw	r30, r24
     320:	20 83       	st	Z, r18
	TWAR = slaveAddr;
     322:	82 e2       	ldi	r24, 0x22	; 34
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	29 81       	ldd	r18, Y+1	; 0x01
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//ENABLE , CLAER FLAG , SEND ACK
     32c:	86 e5       	ldi	r24, 0x56	; 86
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	24 ec       	ldi	r18, 0xC4	; 196
     332:	fc 01       	movw	r30, r24
     334:	20 83       	st	Z, r18
	//WE CAN REMOVE ACK

}
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <I2C_listen>:
void I2C_listen(){
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62

	while(!(TWCR & (1<<TWINT))); //IS LISIN TO CALL FROM MASTER TO ACK
     346:	00 00       	nop
     348:	86 e5       	ldi	r24, 0x56	; 86
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	fc 01       	movw	r30, r24
     34e:	80 81       	ld	r24, Z
     350:	88 23       	and	r24, r24
     352:	d4 f7       	brge	.-12     	; 0x348 <I2C_listen+0xa>
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <I2C_start>:


void I2C_start(){
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN) | (1<<TWINT)| (1<<TWSTA);
     362:	86 e5       	ldi	r24, 0x56	; 86
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	24 ea       	ldi	r18, 0xA4	; 164
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
	//Enable the TWI module
	// make flag be zero
	//Transmit START bit on SDA bus

	while(!(TWCR & (1<<TWINT))); //(start bit is send successfully)
     36c:	00 00       	nop
     36e:	86 e5       	ldi	r24, 0x56	; 86
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	88 23       	and	r24, r24
     378:	d4 f7       	brge	.-12     	; 0x36e <I2C_start+0x14>
}
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <I2C_stop>:
void I2C_stop(){
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWSTO);
     388:	86 e5       	ldi	r24, 0x56	; 86
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	24 e9       	ldi	r18, 0x94	; 148
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
	//Enable the TWI module
	// make flag be zero
	//Transmit START bit on SDA bus


}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <I2C_write>:

void I2C_write(unsigned char byte){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	1f 92       	push	r1
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	89 83       	std	Y+1, r24	; 0x01
	TWDR = byte; // assign byte to DATA REGISTER
     3a4:	83 e2       	ldi	r24, 0x23	; 35
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
	TWCR = (1<<TWINT)|(1<<TWEN);
     3ae:	86 e5       	ldi	r24, 0x56	; 86
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	24 e8       	ldi	r18, 0x84	; 132
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
	// make flag be zero
	//Enable the TWI module

	while(!(TWCR & (1<<TWINT)));//(data is send successfully)
     3b8:	00 00       	nop
     3ba:	86 e5       	ldi	r24, 0x56	; 86
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	88 23       	and	r24, r24
     3c4:	d4 f7       	brge	.-12     	; 0x3ba <I2C_write+0x22>
}
     3c6:	0f 90       	pop	r0
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <I2C_read>:

unsigned char I2C_read(unsigned char isLast){
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
     3d8:	89 83       	std	Y+1, r24	; 0x01

	if(isLast == 0){//for more one byte
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	88 23       	and	r24, r24
     3de:	31 f4       	brne	.+12     	; 0x3ec <I2C_read+0x1e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     3e0:	86 e5       	ldi	r24, 0x56	; 86
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	24 ec       	ldi	r18, 0xC4	; 196
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <I2C_read+0x28>
		// make flag be zero
		//Enable the TWI module
		//Transmit ACK bit on SDA bus

	}else{//for one byte
		TWCR = (1<<TWINT)|(1<<TWEN);
     3ec:	86 e5       	ldi	r24, 0x56	; 86
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	24 e8       	ldi	r18, 0x84	; 132
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
		// make flag be zero
		//Enable the TWI module
	}


	while(!(TWCR & (1<<TWINT))); //(data received successfully)
     3f6:	00 00       	nop
     3f8:	86 e5       	ldi	r24, 0x56	; 86
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	80 81       	ld	r24, Z
     400:	88 23       	and	r24, r24
     402:	d4 f7       	brge	.-12     	; 0x3f8 <I2C_read+0x2a>

	return TWDR ; // return byte from the DATA REGISTER
     404:	83 e2       	ldi	r24, 0x23	; 35
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	80 81       	ld	r24, Z
}
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <LCD_init>:
 *      Author:
 */

#include "lcdlib.h"

void LCD_init(){
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |=(1<<RS) |(1<<RW) |(1<<E);
     41c:	87 e3       	ldi	r24, 0x37	; 55
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	27 e3       	ldi	r18, 0x37	; 55
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	27 60       	ori	r18, 0x07	; 7
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
	LCD_DATA_PORT_DIR = 0XFF;
     42e:	8a e3       	ldi	r24, 0x3A	; 58
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2f ef       	ldi	r18, 0xFF	; 255
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
	LCD_command(0x38);
     438:	88 e3       	ldi	r24, 0x38	; 56
     43a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>
	LCD_command(0x0C);
     43e:	8c e0       	ldi	r24, 0x0C	; 12
     440:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>
	LCD_command(0x01);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>



}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <storeShape>:
void storeShape(unsigned char row , unsigned char col  ){
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2b 97       	sbiw	r28, 0x0b	; 11
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	8a 87       	std	Y+10, r24	; 0x0a
     466:	6b 87       	std	Y+11, r22	; 0x0b
	unsigned char i,shape[8]= {0,0,10,31,31,14,4,0};
     468:	88 e0       	ldi	r24, 0x08	; 8
     46a:	ec e6       	ldi	r30, 0x6C	; 108
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	de 01       	movw	r26, r28
     470:	12 96       	adiw	r26, 0x02	; 2
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <__stack+0x13>
	LCD_command(0x40);//set adress pointer to point on adress 00000 in CGRAM
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>
	for( i=0 ; i < 8  ; i++ ){
     480:	19 82       	std	Y+1, r1	; 0x01
     482:	0f c0       	rjmp	.+30     	; 0x4a2 <__stack+0x43>
		LCD_Data(shape[i]);
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9e 01       	movw	r18, r28
     48c:	2e 5f       	subi	r18, 0xFE	; 254
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	82 0f       	add	r24, r18
     492:	93 1f       	adc	r25, r19
     494:	fc 01       	movw	r30, r24
     496:	80 81       	ld	r24, Z
     498:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_Data>

}
void storeShape(unsigned char row , unsigned char col  ){
	unsigned char i,shape[8]= {0,0,10,31,31,14,4,0};
	LCD_command(0x40);//set adress pointer to point on adress 00000 in CGRAM
	for( i=0 ; i < 8  ; i++ ){
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	8f 5f       	subi	r24, 0xFF	; 255
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	88 30       	cpi	r24, 0x08	; 8
     4a6:	70 f3       	brcs	.-36     	; 0x484 <__stack+0x25>
		LCD_Data(shape[i]);

	}
	LCD_goToRowCol(row , col);
     4a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     4aa:	28 2f       	mov	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	b9 01       	movw	r22, r18
     4b6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_goToRowCol>
	LCD_Data(0x00); // show the address this of CGRAM
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_Data>

}
     4c0:	2b 96       	adiw	r28, 0x0b	; 11
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <LCD_command>:
void LCD_command(unsigned char command){
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	e9 97       	sbiw	r28, 0x39	; 57
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	f8 94       	cli
     4e0:	de bf       	out	0x3e, r29	; 62
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	89 af       	std	Y+57, r24	; 0x39
	LCD_CTRL_PORT &=~((1<<RS)|(1<<RW));
     4e8:	88 e3       	ldi	r24, 0x38	; 56
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	28 e3       	ldi	r18, 0x38	; 56
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	2c 7f       	andi	r18, 0xFC	; 252
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	a0 e8       	ldi	r26, 0x80	; 128
     500:	bf e3       	ldi	r27, 0x3F	; 63
     502:	89 83       	std	Y+1, r24	; 0x01
     504:	9a 83       	std	Y+2, r25	; 0x02
     506:	ab 83       	std	Y+3, r26	; 0x03
     508:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	4a ef       	ldi	r20, 0xFA	; 250
     510:	54 e4       	ldi	r21, 0x44	; 68
     512:	69 81       	ldd	r22, Y+1	; 0x01
     514:	7a 81       	ldd	r23, Y+2	; 0x02
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8d 83       	std	Y+5, r24	; 0x05
     524:	9e 83       	std	Y+6, r25	; 0x06
     526:	af 83       	std	Y+7, r26	; 0x07
     528:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	6d 81       	ldd	r22, Y+5	; 0x05
     534:	7e 81       	ldd	r23, Y+6	; 0x06
     536:	8f 81       	ldd	r24, Y+7	; 0x07
     538:	98 85       	ldd	r25, Y+8	; 0x08
     53a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     53e:	88 23       	and	r24, r24
     540:	2c f4       	brge	.+10     	; 0x54c <LCD_command+0x7a>
		__ticks = 1;
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	9a 87       	std	Y+10, r25	; 0x0a
     548:	89 87       	std	Y+9, r24	; 0x09
     54a:	3f c0       	rjmp	.+126    	; 0x5ca <LCD_command+0xf8>
	else if (__tmp > 65535)
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	4f e7       	ldi	r20, 0x7F	; 127
     552:	57 e4       	ldi	r21, 0x47	; 71
     554:	6d 81       	ldd	r22, Y+5	; 0x05
     556:	7e 81       	ldd	r23, Y+6	; 0x06
     558:	8f 81       	ldd	r24, Y+7	; 0x07
     55a:	98 85       	ldd	r25, Y+8	; 0x08
     55c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     560:	18 16       	cp	r1, r24
     562:	4c f5       	brge	.+82     	; 0x5b6 <LCD_command+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e2       	ldi	r20, 0x20	; 32
     56a:	51 e4       	ldi	r21, 0x41	; 65
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	7a 81       	ldd	r23, Y+2	; 0x02
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     578:	dc 01       	movw	r26, r24
     57a:	cb 01       	movw	r24, r22
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     584:	dc 01       	movw	r26, r24
     586:	cb 01       	movw	r24, r22
     588:	9a 87       	std	Y+10, r25	; 0x0a
     58a:	89 87       	std	Y+9, r24	; 0x09
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <LCD_command+0xda>
     58e:	88 ec       	ldi	r24, 0xC8	; 200
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	9c 87       	std	Y+12, r25	; 0x0c
     594:	8b 87       	std	Y+11, r24	; 0x0b
     596:	8b 85       	ldd	r24, Y+11	; 0x0b
     598:	9c 85       	ldd	r25, Y+12	; 0x0c
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_command+0xc8>
     59e:	9c 87       	std	Y+12, r25	; 0x0c
     5a0:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	9a 87       	std	Y+10, r25	; 0x0a
     5aa:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ac:	89 85       	ldd	r24, Y+9	; 0x09
     5ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b0:	89 2b       	or	r24, r25
     5b2:	69 f7       	brne	.-38     	; 0x58e <LCD_command+0xbc>
     5b4:	14 c0       	rjmp	.+40     	; 0x5de <LCD_command+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5b6:	6d 81       	ldd	r22, Y+5	; 0x05
     5b8:	7e 81       	ldd	r23, Y+6	; 0x06
     5ba:	8f 81       	ldd	r24, Y+7	; 0x07
     5bc:	98 85       	ldd	r25, Y+8	; 0x08
     5be:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	9a 87       	std	Y+10, r25	; 0x0a
     5c8:	89 87       	std	Y+9, r24	; 0x09
     5ca:	89 85       	ldd	r24, Y+9	; 0x09
     5cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ce:	9e 87       	std	Y+14, r25	; 0x0e
     5d0:	8d 87       	std	Y+13, r24	; 0x0d
     5d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d4:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <LCD_command+0x104>
     5da:	9e 87       	std	Y+14, r25	; 0x0e
     5dc:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	LCD_CTRL_PORT |=(1<<E);
     5de:	88 e3       	ldi	r24, 0x38	; 56
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	28 e3       	ldi	r18, 0x38	; 56
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	20 81       	ld	r18, Z
     5ea:	24 60       	ori	r18, 0x04	; 4
     5ec:	fc 01       	movw	r30, r24
     5ee:	20 83       	st	Z, r18
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	a0 e8       	ldi	r26, 0x80	; 128
     5f6:	bf e3       	ldi	r27, 0x3F	; 63
     5f8:	8f 87       	std	Y+15, r24	; 0x0f
     5fa:	98 8b       	std	Y+16, r25	; 0x10
     5fc:	a9 8b       	std	Y+17, r26	; 0x11
     5fe:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	4a ef       	ldi	r20, 0xFA	; 250
     606:	54 e4       	ldi	r21, 0x44	; 68
     608:	6f 85       	ldd	r22, Y+15	; 0x0f
     60a:	78 89       	ldd	r23, Y+16	; 0x10
     60c:	89 89       	ldd	r24, Y+17	; 0x11
     60e:	9a 89       	ldd	r25, Y+18	; 0x12
     610:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	8b 8b       	std	Y+19, r24	; 0x13
     61a:	9c 8b       	std	Y+20, r25	; 0x14
     61c:	ad 8b       	std	Y+21, r26	; 0x15
     61e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e8       	ldi	r20, 0x80	; 128
     626:	5f e3       	ldi	r21, 0x3F	; 63
     628:	6b 89       	ldd	r22, Y+19	; 0x13
     62a:	7c 89       	ldd	r23, Y+20	; 0x14
     62c:	8d 89       	ldd	r24, Y+21	; 0x15
     62e:	9e 89       	ldd	r25, Y+22	; 0x16
     630:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     634:	88 23       	and	r24, r24
     636:	2c f4       	brge	.+10     	; 0x642 <LCD_command+0x170>
		__ticks = 1;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	98 8f       	std	Y+24, r25	; 0x18
     63e:	8f 8b       	std	Y+23, r24	; 0x17
     640:	3f c0       	rjmp	.+126    	; 0x6c0 <LCD_command+0x1ee>
	else if (__tmp > 65535)
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	3f ef       	ldi	r19, 0xFF	; 255
     646:	4f e7       	ldi	r20, 0x7F	; 127
     648:	57 e4       	ldi	r21, 0x47	; 71
     64a:	6b 89       	ldd	r22, Y+19	; 0x13
     64c:	7c 89       	ldd	r23, Y+20	; 0x14
     64e:	8d 89       	ldd	r24, Y+21	; 0x15
     650:	9e 89       	ldd	r25, Y+22	; 0x16
     652:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     656:	18 16       	cp	r1, r24
     658:	4c f5       	brge	.+82     	; 0x6ac <LCD_command+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e2       	ldi	r20, 0x20	; 32
     660:	51 e4       	ldi	r21, 0x41	; 65
     662:	6f 85       	ldd	r22, Y+15	; 0x0f
     664:	78 89       	ldd	r23, Y+16	; 0x10
     666:	89 89       	ldd	r24, Y+17	; 0x11
     668:	9a 89       	ldd	r25, Y+18	; 0x12
     66a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     66e:	dc 01       	movw	r26, r24
     670:	cb 01       	movw	r24, r22
     672:	bc 01       	movw	r22, r24
     674:	cd 01       	movw	r24, r26
     676:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     67a:	dc 01       	movw	r26, r24
     67c:	cb 01       	movw	r24, r22
     67e:	98 8f       	std	Y+24, r25	; 0x18
     680:	8f 8b       	std	Y+23, r24	; 0x17
     682:	0f c0       	rjmp	.+30     	; 0x6a2 <LCD_command+0x1d0>
     684:	88 ec       	ldi	r24, 0xC8	; 200
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9a 8f       	std	Y+26, r25	; 0x1a
     68a:	89 8f       	std	Y+25, r24	; 0x19
     68c:	89 8d       	ldd	r24, Y+25	; 0x19
     68e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <LCD_command+0x1be>
     694:	9a 8f       	std	Y+26, r25	; 0x1a
     696:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     698:	8f 89       	ldd	r24, Y+23	; 0x17
     69a:	98 8d       	ldd	r25, Y+24	; 0x18
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	98 8f       	std	Y+24, r25	; 0x18
     6a0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a2:	8f 89       	ldd	r24, Y+23	; 0x17
     6a4:	98 8d       	ldd	r25, Y+24	; 0x18
     6a6:	89 2b       	or	r24, r25
     6a8:	69 f7       	brne	.-38     	; 0x684 <LCD_command+0x1b2>
     6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <LCD_command+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6ac:	6b 89       	ldd	r22, Y+19	; 0x13
     6ae:	7c 89       	ldd	r23, Y+20	; 0x14
     6b0:	8d 89       	ldd	r24, Y+21	; 0x15
     6b2:	9e 89       	ldd	r25, Y+22	; 0x16
     6b4:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	98 8f       	std	Y+24, r25	; 0x18
     6be:	8f 8b       	std	Y+23, r24	; 0x17
     6c0:	8f 89       	ldd	r24, Y+23	; 0x17
     6c2:	98 8d       	ldd	r25, Y+24	; 0x18
     6c4:	9c 8f       	std	Y+28, r25	; 0x1c
     6c6:	8b 8f       	std	Y+27, r24	; 0x1b
     6c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <LCD_command+0x1fa>
     6d0:	9c 8f       	std	Y+28, r25	; 0x1c
     6d2:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
	LCD_DATA_PORT = command;
     6d4:	8b e3       	ldi	r24, 0x3B	; 59
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	29 ad       	ldd	r18, Y+57	; 0x39
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	a0 e8       	ldi	r26, 0x80	; 128
     6e4:	bf e3       	ldi	r27, 0x3F	; 63
     6e6:	8d 8f       	std	Y+29, r24	; 0x1d
     6e8:	9e 8f       	std	Y+30, r25	; 0x1e
     6ea:	af 8f       	std	Y+31, r26	; 0x1f
     6ec:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	4a ef       	ldi	r20, 0xFA	; 250
     6f4:	54 e4       	ldi	r21, 0x44	; 68
     6f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6f8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6fc:	98 a1       	ldd	r25, Y+32	; 0x20
     6fe:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	89 a3       	std	Y+33, r24	; 0x21
     708:	9a a3       	std	Y+34, r25	; 0x22
     70a:	ab a3       	std	Y+35, r26	; 0x23
     70c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e8       	ldi	r20, 0x80	; 128
     714:	5f e3       	ldi	r21, 0x3F	; 63
     716:	69 a1       	ldd	r22, Y+33	; 0x21
     718:	7a a1       	ldd	r23, Y+34	; 0x22
     71a:	8b a1       	ldd	r24, Y+35	; 0x23
     71c:	9c a1       	ldd	r25, Y+36	; 0x24
     71e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     722:	88 23       	and	r24, r24
     724:	2c f4       	brge	.+10     	; 0x730 <LCD_command+0x25e>
		__ticks = 1;
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	9e a3       	std	Y+38, r25	; 0x26
     72c:	8d a3       	std	Y+37, r24	; 0x25
     72e:	3f c0       	rjmp	.+126    	; 0x7ae <LCD_command+0x2dc>
	else if (__tmp > 65535)
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	3f ef       	ldi	r19, 0xFF	; 255
     734:	4f e7       	ldi	r20, 0x7F	; 127
     736:	57 e4       	ldi	r21, 0x47	; 71
     738:	69 a1       	ldd	r22, Y+33	; 0x21
     73a:	7a a1       	ldd	r23, Y+34	; 0x22
     73c:	8b a1       	ldd	r24, Y+35	; 0x23
     73e:	9c a1       	ldd	r25, Y+36	; 0x24
     740:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	4c f5       	brge	.+82     	; 0x79a <LCD_command+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e2       	ldi	r20, 0x20	; 32
     74e:	51 e4       	ldi	r21, 0x41	; 65
     750:	6d 8d       	ldd	r22, Y+29	; 0x1d
     752:	7e 8d       	ldd	r23, Y+30	; 0x1e
     754:	8f 8d       	ldd	r24, Y+31	; 0x1f
     756:	98 a1       	ldd	r25, Y+32	; 0x20
     758:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	9e a3       	std	Y+38, r25	; 0x26
     76e:	8d a3       	std	Y+37, r24	; 0x25
     770:	0f c0       	rjmp	.+30     	; 0x790 <LCD_command+0x2be>
     772:	88 ec       	ldi	r24, 0xC8	; 200
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	98 a7       	std	Y+40, r25	; 0x28
     778:	8f a3       	std	Y+39, r24	; 0x27
     77a:	8f a1       	ldd	r24, Y+39	; 0x27
     77c:	98 a5       	ldd	r25, Y+40	; 0x28
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <LCD_command+0x2ac>
     782:	98 a7       	std	Y+40, r25	; 0x28
     784:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     786:	8d a1       	ldd	r24, Y+37	; 0x25
     788:	9e a1       	ldd	r25, Y+38	; 0x26
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	9e a3       	std	Y+38, r25	; 0x26
     78e:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     790:	8d a1       	ldd	r24, Y+37	; 0x25
     792:	9e a1       	ldd	r25, Y+38	; 0x26
     794:	89 2b       	or	r24, r25
     796:	69 f7       	brne	.-38     	; 0x772 <LCD_command+0x2a0>
     798:	14 c0       	rjmp	.+40     	; 0x7c2 <LCD_command+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     79a:	69 a1       	ldd	r22, Y+33	; 0x21
     79c:	7a a1       	ldd	r23, Y+34	; 0x22
     79e:	8b a1       	ldd	r24, Y+35	; 0x23
     7a0:	9c a1       	ldd	r25, Y+36	; 0x24
     7a2:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	9e a3       	std	Y+38, r25	; 0x26
     7ac:	8d a3       	std	Y+37, r24	; 0x25
     7ae:	8d a1       	ldd	r24, Y+37	; 0x25
     7b0:	9e a1       	ldd	r25, Y+38	; 0x26
     7b2:	9a a7       	std	Y+42, r25	; 0x2a
     7b4:	89 a7       	std	Y+41, r24	; 0x29
     7b6:	89 a5       	ldd	r24, Y+41	; 0x29
     7b8:	9a a5       	ldd	r25, Y+42	; 0x2a
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <LCD_command+0x2e8>
     7be:	9a a7       	std	Y+42, r25	; 0x2a
     7c0:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);
	LCD_CTRL_PORT &=~(1<<E);
     7c2:	88 e3       	ldi	r24, 0x38	; 56
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	28 e3       	ldi	r18, 0x38	; 56
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	20 81       	ld	r18, Z
     7ce:	2b 7f       	andi	r18, 0xFB	; 251
     7d0:	fc 01       	movw	r30, r24
     7d2:	20 83       	st	Z, r18
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e8       	ldi	r26, 0x80	; 128
     7da:	bf e3       	ldi	r27, 0x3F	; 63
     7dc:	8b a7       	std	Y+43, r24	; 0x2b
     7de:	9c a7       	std	Y+44, r25	; 0x2c
     7e0:	ad a7       	std	Y+45, r26	; 0x2d
     7e2:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	4a ef       	ldi	r20, 0xFA	; 250
     7ea:	54 e4       	ldi	r21, 0x44	; 68
     7ec:	6b a5       	ldd	r22, Y+43	; 0x2b
     7ee:	7c a5       	ldd	r23, Y+44	; 0x2c
     7f0:	8d a5       	ldd	r24, Y+45	; 0x2d
     7f2:	9e a5       	ldd	r25, Y+46	; 0x2e
     7f4:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	8f a7       	std	Y+47, r24	; 0x2f
     7fe:	98 ab       	std	Y+48, r25	; 0x30
     800:	a9 ab       	std	Y+49, r26	; 0x31
     802:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	6f a5       	ldd	r22, Y+47	; 0x2f
     80e:	78 a9       	ldd	r23, Y+48	; 0x30
     810:	89 a9       	ldd	r24, Y+49	; 0x31
     812:	9a a9       	ldd	r25, Y+50	; 0x32
     814:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	2c f4       	brge	.+10     	; 0x826 <LCD_command+0x354>
		__ticks = 1;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9c ab       	std	Y+52, r25	; 0x34
     822:	8b ab       	std	Y+51, r24	; 0x33
     824:	3f c0       	rjmp	.+126    	; 0x8a4 <LCD_command+0x3d2>
	else if (__tmp > 65535)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	3f ef       	ldi	r19, 0xFF	; 255
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	57 e4       	ldi	r21, 0x47	; 71
     82e:	6f a5       	ldd	r22, Y+47	; 0x2f
     830:	78 a9       	ldd	r23, Y+48	; 0x30
     832:	89 a9       	ldd	r24, Y+49	; 0x31
     834:	9a a9       	ldd	r25, Y+50	; 0x32
     836:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     83a:	18 16       	cp	r1, r24
     83c:	4c f5       	brge	.+82     	; 0x890 <LCD_command+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	40 e2       	ldi	r20, 0x20	; 32
     844:	51 e4       	ldi	r21, 0x41	; 65
     846:	6b a5       	ldd	r22, Y+43	; 0x2b
     848:	7c a5       	ldd	r23, Y+44	; 0x2c
     84a:	8d a5       	ldd	r24, Y+45	; 0x2d
     84c:	9e a5       	ldd	r25, Y+46	; 0x2e
     84e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	bc 01       	movw	r22, r24
     858:	cd 01       	movw	r24, r26
     85a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	9c ab       	std	Y+52, r25	; 0x34
     864:	8b ab       	std	Y+51, r24	; 0x33
     866:	0f c0       	rjmp	.+30     	; 0x886 <LCD_command+0x3b4>
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9e ab       	std	Y+54, r25	; 0x36
     86e:	8d ab       	std	Y+53, r24	; 0x35
     870:	8d a9       	ldd	r24, Y+53	; 0x35
     872:	9e a9       	ldd	r25, Y+54	; 0x36
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <LCD_command+0x3a2>
     878:	9e ab       	std	Y+54, r25	; 0x36
     87a:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87c:	8b a9       	ldd	r24, Y+51	; 0x33
     87e:	9c a9       	ldd	r25, Y+52	; 0x34
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	9c ab       	std	Y+52, r25	; 0x34
     884:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     886:	8b a9       	ldd	r24, Y+51	; 0x33
     888:	9c a9       	ldd	r25, Y+52	; 0x34
     88a:	89 2b       	or	r24, r25
     88c:	69 f7       	brne	.-38     	; 0x868 <LCD_command+0x396>
     88e:	14 c0       	rjmp	.+40     	; 0x8b8 <LCD_command+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     890:	6f a5       	ldd	r22, Y+47	; 0x2f
     892:	78 a9       	ldd	r23, Y+48	; 0x30
     894:	89 a9       	ldd	r24, Y+49	; 0x31
     896:	9a a9       	ldd	r25, Y+50	; 0x32
     898:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	9c ab       	std	Y+52, r25	; 0x34
     8a2:	8b ab       	std	Y+51, r24	; 0x33
     8a4:	8b a9       	ldd	r24, Y+51	; 0x33
     8a6:	9c a9       	ldd	r25, Y+52	; 0x34
     8a8:	98 af       	std	Y+56, r25	; 0x38
     8aa:	8f ab       	std	Y+55, r24	; 0x37
     8ac:	8f a9       	ldd	r24, Y+55	; 0x37
     8ae:	98 ad       	ldd	r25, Y+56	; 0x38
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <LCD_command+0x3de>
     8b4:	98 af       	std	Y+56, r25	; 0x38
     8b6:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);
}
     8b8:	e9 96       	adiw	r28, 0x39	; 57
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <LCD_Data>:
void LCD_Data(unsigned char data){
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	e9 97       	sbiw	r28, 0x39	; 57
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	89 af       	std	Y+57, r24	; 0x39
	LCD_CTRL_PORT |=(1<<RS);
     8e0:	88 e3       	ldi	r24, 0x38	; 56
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	28 e3       	ldi	r18, 0x38	; 56
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	f9 01       	movw	r30, r18
     8ea:	20 81       	ld	r18, Z
     8ec:	21 60       	ori	r18, 0x01	; 1
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
	LCD_CTRL_PORT &=~(1<<RW);
     8f2:	88 e3       	ldi	r24, 0x38	; 56
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	28 e3       	ldi	r18, 0x38	; 56
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	f9 01       	movw	r30, r18
     8fc:	20 81       	ld	r18, Z
     8fe:	2d 7f       	andi	r18, 0xFD	; 253
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a0 e8       	ldi	r26, 0x80	; 128
     90a:	bf e3       	ldi	r27, 0x3F	; 63
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	9a 83       	std	Y+2, r25	; 0x02
     910:	ab 83       	std	Y+3, r26	; 0x03
     912:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	4a ef       	ldi	r20, 0xFA	; 250
     91a:	54 e4       	ldi	r21, 0x44	; 68
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	7a 81       	ldd	r23, Y+2	; 0x02
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	8d 83       	std	Y+5, r24	; 0x05
     92e:	9e 83       	std	Y+6, r25	; 0x06
     930:	af 83       	std	Y+7, r26	; 0x07
     932:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	40 e8       	ldi	r20, 0x80	; 128
     93a:	5f e3       	ldi	r21, 0x3F	; 63
     93c:	6d 81       	ldd	r22, Y+5	; 0x05
     93e:	7e 81       	ldd	r23, Y+6	; 0x06
     940:	8f 81       	ldd	r24, Y+7	; 0x07
     942:	98 85       	ldd	r25, Y+8	; 0x08
     944:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     948:	88 23       	and	r24, r24
     94a:	2c f4       	brge	.+10     	; 0x956 <LCD_Data+0x8c>
		__ticks = 1;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9a 87       	std	Y+10, r25	; 0x0a
     952:	89 87       	std	Y+9, r24	; 0x09
     954:	3f c0       	rjmp	.+126    	; 0x9d4 <LCD_Data+0x10a>
	else if (__tmp > 65535)
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	3f ef       	ldi	r19, 0xFF	; 255
     95a:	4f e7       	ldi	r20, 0x7F	; 127
     95c:	57 e4       	ldi	r21, 0x47	; 71
     95e:	6d 81       	ldd	r22, Y+5	; 0x05
     960:	7e 81       	ldd	r23, Y+6	; 0x06
     962:	8f 81       	ldd	r24, Y+7	; 0x07
     964:	98 85       	ldd	r25, Y+8	; 0x08
     966:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     96a:	18 16       	cp	r1, r24
     96c:	4c f5       	brge	.+82     	; 0x9c0 <LCD_Data+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e2       	ldi	r20, 0x20	; 32
     974:	51 e4       	ldi	r21, 0x41	; 65
     976:	69 81       	ldd	r22, Y+1	; 0x01
     978:	7a 81       	ldd	r23, Y+2	; 0x02
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	bc 01       	movw	r22, r24
     988:	cd 01       	movw	r24, r26
     98a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	9a 87       	std	Y+10, r25	; 0x0a
     994:	89 87       	std	Y+9, r24	; 0x09
     996:	0f c0       	rjmp	.+30     	; 0x9b6 <LCD_Data+0xec>
     998:	88 ec       	ldi	r24, 0xC8	; 200
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	9c 87       	std	Y+12, r25	; 0x0c
     99e:	8b 87       	std	Y+11, r24	; 0x0b
     9a0:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a2:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	f1 f7       	brne	.-4      	; 0x9a4 <LCD_Data+0xda>
     9a8:	9c 87       	std	Y+12, r25	; 0x0c
     9aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9a 87       	std	Y+10, r25	; 0x0a
     9b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	89 2b       	or	r24, r25
     9bc:	69 f7       	brne	.-38     	; 0x998 <LCD_Data+0xce>
     9be:	14 c0       	rjmp	.+40     	; 0x9e8 <LCD_Data+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c0:	6d 81       	ldd	r22, Y+5	; 0x05
     9c2:	7e 81       	ldd	r23, Y+6	; 0x06
     9c4:	8f 81       	ldd	r24, Y+7	; 0x07
     9c6:	98 85       	ldd	r25, Y+8	; 0x08
     9c8:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	9a 87       	std	Y+10, r25	; 0x0a
     9d2:	89 87       	std	Y+9, r24	; 0x09
     9d4:	89 85       	ldd	r24, Y+9	; 0x09
     9d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d8:	9e 87       	std	Y+14, r25	; 0x0e
     9da:	8d 87       	std	Y+13, r24	; 0x0d
     9dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     9de:	9e 85       	ldd	r25, Y+14	; 0x0e
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LCD_Data+0x116>
     9e4:	9e 87       	std	Y+14, r25	; 0x0e
     9e6:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	LCD_CTRL_PORT |=(1<<E);
     9e8:	88 e3       	ldi	r24, 0x38	; 56
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	28 e3       	ldi	r18, 0x38	; 56
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	24 60       	ori	r18, 0x04	; 4
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e8       	ldi	r26, 0x80	; 128
     a00:	bf e3       	ldi	r27, 0x3F	; 63
     a02:	8f 87       	std	Y+15, r24	; 0x0f
     a04:	98 8b       	std	Y+16, r25	; 0x10
     a06:	a9 8b       	std	Y+17, r26	; 0x11
     a08:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	4a ef       	ldi	r20, 0xFA	; 250
     a10:	54 e4       	ldi	r21, 0x44	; 68
     a12:	6f 85       	ldd	r22, Y+15	; 0x0f
     a14:	78 89       	ldd	r23, Y+16	; 0x10
     a16:	89 89       	ldd	r24, Y+17	; 0x11
     a18:	9a 89       	ldd	r25, Y+18	; 0x12
     a1a:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	8b 8b       	std	Y+19, r24	; 0x13
     a24:	9c 8b       	std	Y+20, r25	; 0x14
     a26:	ad 8b       	std	Y+21, r26	; 0x15
     a28:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e8       	ldi	r20, 0x80	; 128
     a30:	5f e3       	ldi	r21, 0x3F	; 63
     a32:	6b 89       	ldd	r22, Y+19	; 0x13
     a34:	7c 89       	ldd	r23, Y+20	; 0x14
     a36:	8d 89       	ldd	r24, Y+21	; 0x15
     a38:	9e 89       	ldd	r25, Y+22	; 0x16
     a3a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	2c f4       	brge	.+10     	; 0xa4c <LCD_Data+0x182>
		__ticks = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	98 8f       	std	Y+24, r25	; 0x18
     a48:	8f 8b       	std	Y+23, r24	; 0x17
     a4a:	3f c0       	rjmp	.+126    	; 0xaca <LCD_Data+0x200>
	else if (__tmp > 65535)
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	3f ef       	ldi	r19, 0xFF	; 255
     a50:	4f e7       	ldi	r20, 0x7F	; 127
     a52:	57 e4       	ldi	r21, 0x47	; 71
     a54:	6b 89       	ldd	r22, Y+19	; 0x13
     a56:	7c 89       	ldd	r23, Y+20	; 0x14
     a58:	8d 89       	ldd	r24, Y+21	; 0x15
     a5a:	9e 89       	ldd	r25, Y+22	; 0x16
     a5c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     a60:	18 16       	cp	r1, r24
     a62:	4c f5       	brge	.+82     	; 0xab6 <LCD_Data+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	6f 85       	ldd	r22, Y+15	; 0x0f
     a6e:	78 89       	ldd	r23, Y+16	; 0x10
     a70:	89 89       	ldd	r24, Y+17	; 0x11
     a72:	9a 89       	ldd	r25, Y+18	; 0x12
     a74:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	bc 01       	movw	r22, r24
     a7e:	cd 01       	movw	r24, r26
     a80:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	98 8f       	std	Y+24, r25	; 0x18
     a8a:	8f 8b       	std	Y+23, r24	; 0x17
     a8c:	0f c0       	rjmp	.+30     	; 0xaac <LCD_Data+0x1e2>
     a8e:	88 ec       	ldi	r24, 0xC8	; 200
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	9a 8f       	std	Y+26, r25	; 0x1a
     a94:	89 8f       	std	Y+25, r24	; 0x19
     a96:	89 8d       	ldd	r24, Y+25	; 0x19
     a98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <LCD_Data+0x1d0>
     a9e:	9a 8f       	std	Y+26, r25	; 0x1a
     aa0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa2:	8f 89       	ldd	r24, Y+23	; 0x17
     aa4:	98 8d       	ldd	r25, Y+24	; 0x18
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	98 8f       	std	Y+24, r25	; 0x18
     aaa:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aac:	8f 89       	ldd	r24, Y+23	; 0x17
     aae:	98 8d       	ldd	r25, Y+24	; 0x18
     ab0:	89 2b       	or	r24, r25
     ab2:	69 f7       	brne	.-38     	; 0xa8e <LCD_Data+0x1c4>
     ab4:	14 c0       	rjmp	.+40     	; 0xade <LCD_Data+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ab6:	6b 89       	ldd	r22, Y+19	; 0x13
     ab8:	7c 89       	ldd	r23, Y+20	; 0x14
     aba:	8d 89       	ldd	r24, Y+21	; 0x15
     abc:	9e 89       	ldd	r25, Y+22	; 0x16
     abe:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	98 8f       	std	Y+24, r25	; 0x18
     ac8:	8f 8b       	std	Y+23, r24	; 0x17
     aca:	8f 89       	ldd	r24, Y+23	; 0x17
     acc:	98 8d       	ldd	r25, Y+24	; 0x18
     ace:	9c 8f       	std	Y+28, r25	; 0x1c
     ad0:	8b 8f       	std	Y+27, r24	; 0x1b
     ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <LCD_Data+0x20c>
     ada:	9c 8f       	std	Y+28, r25	; 0x1c
     adc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
	LCD_DATA_PORT = data;
     ade:	8b e3       	ldi	r24, 0x3B	; 59
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	29 ad       	ldd	r18, Y+57	; 0x39
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e8       	ldi	r26, 0x80	; 128
     aee:	bf e3       	ldi	r27, 0x3F	; 63
     af0:	8d 8f       	std	Y+29, r24	; 0x1d
     af2:	9e 8f       	std	Y+30, r25	; 0x1e
     af4:	af 8f       	std	Y+31, r26	; 0x1f
     af6:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	4a ef       	ldi	r20, 0xFA	; 250
     afe:	54 e4       	ldi	r21, 0x44	; 68
     b00:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b02:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b06:	98 a1       	ldd	r25, Y+32	; 0x20
     b08:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     b0c:	dc 01       	movw	r26, r24
     b0e:	cb 01       	movw	r24, r22
     b10:	89 a3       	std	Y+33, r24	; 0x21
     b12:	9a a3       	std	Y+34, r25	; 0x22
     b14:	ab a3       	std	Y+35, r26	; 0x23
     b16:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	69 a1       	ldd	r22, Y+33	; 0x21
     b22:	7a a1       	ldd	r23, Y+34	; 0x22
     b24:	8b a1       	ldd	r24, Y+35	; 0x23
     b26:	9c a1       	ldd	r25, Y+36	; 0x24
     b28:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     b2c:	88 23       	and	r24, r24
     b2e:	2c f4       	brge	.+10     	; 0xb3a <LCD_Data+0x270>
		__ticks = 1;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9e a3       	std	Y+38, r25	; 0x26
     b36:	8d a3       	std	Y+37, r24	; 0x25
     b38:	3f c0       	rjmp	.+126    	; 0xbb8 <LCD_Data+0x2ee>
	else if (__tmp > 65535)
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f e7       	ldi	r20, 0x7F	; 127
     b40:	57 e4       	ldi	r21, 0x47	; 71
     b42:	69 a1       	ldd	r22, Y+33	; 0x21
     b44:	7a a1       	ldd	r23, Y+34	; 0x22
     b46:	8b a1       	ldd	r24, Y+35	; 0x23
     b48:	9c a1       	ldd	r25, Y+36	; 0x24
     b4a:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     b4e:	18 16       	cp	r1, r24
     b50:	4c f5       	brge	.+82     	; 0xba4 <LCD_Data+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e2       	ldi	r20, 0x20	; 32
     b58:	51 e4       	ldi	r21, 0x41	; 65
     b5a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b5c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b60:	98 a1       	ldd	r25, Y+32	; 0x20
     b62:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	bc 01       	movw	r22, r24
     b6c:	cd 01       	movw	r24, r26
     b6e:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	9e a3       	std	Y+38, r25	; 0x26
     b78:	8d a3       	std	Y+37, r24	; 0x25
     b7a:	0f c0       	rjmp	.+30     	; 0xb9a <LCD_Data+0x2d0>
     b7c:	88 ec       	ldi	r24, 0xC8	; 200
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	98 a7       	std	Y+40, r25	; 0x28
     b82:	8f a3       	std	Y+39, r24	; 0x27
     b84:	8f a1       	ldd	r24, Y+39	; 0x27
     b86:	98 a5       	ldd	r25, Y+40	; 0x28
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <LCD_Data+0x2be>
     b8c:	98 a7       	std	Y+40, r25	; 0x28
     b8e:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b90:	8d a1       	ldd	r24, Y+37	; 0x25
     b92:	9e a1       	ldd	r25, Y+38	; 0x26
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9e a3       	std	Y+38, r25	; 0x26
     b98:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b9a:	8d a1       	ldd	r24, Y+37	; 0x25
     b9c:	9e a1       	ldd	r25, Y+38	; 0x26
     b9e:	89 2b       	or	r24, r25
     ba0:	69 f7       	brne	.-38     	; 0xb7c <LCD_Data+0x2b2>
     ba2:	14 c0       	rjmp	.+40     	; 0xbcc <LCD_Data+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba4:	69 a1       	ldd	r22, Y+33	; 0x21
     ba6:	7a a1       	ldd	r23, Y+34	; 0x22
     ba8:	8b a1       	ldd	r24, Y+35	; 0x23
     baa:	9c a1       	ldd	r25, Y+36	; 0x24
     bac:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	9e a3       	std	Y+38, r25	; 0x26
     bb6:	8d a3       	std	Y+37, r24	; 0x25
     bb8:	8d a1       	ldd	r24, Y+37	; 0x25
     bba:	9e a1       	ldd	r25, Y+38	; 0x26
     bbc:	9a a7       	std	Y+42, r25	; 0x2a
     bbe:	89 a7       	std	Y+41, r24	; 0x29
     bc0:	89 a5       	ldd	r24, Y+41	; 0x29
     bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <LCD_Data+0x2fa>
     bc8:	9a a7       	std	Y+42, r25	; 0x2a
     bca:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(1);
	LCD_CTRL_PORT &=~(1<<E);
     bcc:	88 e3       	ldi	r24, 0x38	; 56
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	28 e3       	ldi	r18, 0x38	; 56
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	f9 01       	movw	r30, r18
     bd6:	20 81       	ld	r18, Z
     bd8:	2b 7f       	andi	r18, 0xFB	; 251
     bda:	fc 01       	movw	r30, r24
     bdc:	20 83       	st	Z, r18
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	a0 e8       	ldi	r26, 0x80	; 128
     be4:	bf e3       	ldi	r27, 0x3F	; 63
     be6:	8b a7       	std	Y+43, r24	; 0x2b
     be8:	9c a7       	std	Y+44, r25	; 0x2c
     bea:	ad a7       	std	Y+45, r26	; 0x2d
     bec:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4a ef       	ldi	r20, 0xFA	; 250
     bf4:	54 e4       	ldi	r21, 0x44	; 68
     bf6:	6b a5       	ldd	r22, Y+43	; 0x2b
     bf8:	7c a5       	ldd	r23, Y+44	; 0x2c
     bfa:	8d a5       	ldd	r24, Y+45	; 0x2d
     bfc:	9e a5       	ldd	r25, Y+46	; 0x2e
     bfe:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	8f a7       	std	Y+47, r24	; 0x2f
     c08:	98 ab       	std	Y+48, r25	; 0x30
     c0a:	a9 ab       	std	Y+49, r26	; 0x31
     c0c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e8       	ldi	r20, 0x80	; 128
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	6f a5       	ldd	r22, Y+47	; 0x2f
     c18:	78 a9       	ldd	r23, Y+48	; 0x30
     c1a:	89 a9       	ldd	r24, Y+49	; 0x31
     c1c:	9a a9       	ldd	r25, Y+50	; 0x32
     c1e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     c22:	88 23       	and	r24, r24
     c24:	2c f4       	brge	.+10     	; 0xc30 <LCD_Data+0x366>
		__ticks = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9c ab       	std	Y+52, r25	; 0x34
     c2c:	8b ab       	std	Y+51, r24	; 0x33
     c2e:	3f c0       	rjmp	.+126    	; 0xcae <LCD_Data+0x3e4>
	else if (__tmp > 65535)
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	6f a5       	ldd	r22, Y+47	; 0x2f
     c3a:	78 a9       	ldd	r23, Y+48	; 0x30
     c3c:	89 a9       	ldd	r24, Y+49	; 0x31
     c3e:	9a a9       	ldd	r25, Y+50	; 0x32
     c40:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	4c f5       	brge	.+82     	; 0xc9a <LCD_Data+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	6b a5       	ldd	r22, Y+43	; 0x2b
     c52:	7c a5       	ldd	r23, Y+44	; 0x2c
     c54:	8d a5       	ldd	r24, Y+45	; 0x2d
     c56:	9e a5       	ldd	r25, Y+46	; 0x2e
     c58:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9c ab       	std	Y+52, r25	; 0x34
     c6e:	8b ab       	std	Y+51, r24	; 0x33
     c70:	0f c0       	rjmp	.+30     	; 0xc90 <LCD_Data+0x3c6>
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9e ab       	std	Y+54, r25	; 0x36
     c78:	8d ab       	std	Y+53, r24	; 0x35
     c7a:	8d a9       	ldd	r24, Y+53	; 0x35
     c7c:	9e a9       	ldd	r25, Y+54	; 0x36
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <LCD_Data+0x3b4>
     c82:	9e ab       	std	Y+54, r25	; 0x36
     c84:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	8b a9       	ldd	r24, Y+51	; 0x33
     c88:	9c a9       	ldd	r25, Y+52	; 0x34
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	9c ab       	std	Y+52, r25	; 0x34
     c8e:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c90:	8b a9       	ldd	r24, Y+51	; 0x33
     c92:	9c a9       	ldd	r25, Y+52	; 0x34
     c94:	89 2b       	or	r24, r25
     c96:	69 f7       	brne	.-38     	; 0xc72 <LCD_Data+0x3a8>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <LCD_Data+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	6f a5       	ldd	r22, Y+47	; 0x2f
     c9c:	78 a9       	ldd	r23, Y+48	; 0x30
     c9e:	89 a9       	ldd	r24, Y+49	; 0x31
     ca0:	9a a9       	ldd	r25, Y+50	; 0x32
     ca2:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9c ab       	std	Y+52, r25	; 0x34
     cac:	8b ab       	std	Y+51, r24	; 0x33
     cae:	8b a9       	ldd	r24, Y+51	; 0x33
     cb0:	9c a9       	ldd	r25, Y+52	; 0x34
     cb2:	98 af       	std	Y+56, r25	; 0x38
     cb4:	8f ab       	std	Y+55, r24	; 0x37
     cb6:	8f a9       	ldd	r24, Y+55	; 0x37
     cb8:	98 ad       	ldd	r25, Y+56	; 0x38
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <LCD_Data+0x3f0>
     cbe:	98 af       	std	Y+56, r25	; 0x38
     cc0:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);
}
     cc2:	e9 96       	adiw	r28, 0x39	; 57
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <LCD_goToRowCol>:
void LCD_goToRowCol(unsigned char row ,unsigned char col ){
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	64 97       	sbiw	r28, 0x14	; 20
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	8b 8b       	std	Y+19, r24	; 0x13
     cea:	6c 8b       	std	Y+20, r22	; 0x14
	unsigned char fristCharAddr[]={0x80 , 0XC0, 0X94 ,0XD4};
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	8f 87       	std	Y+15, r24	; 0x0f
     cf0:	80 ec       	ldi	r24, 0xC0	; 192
     cf2:	88 8b       	std	Y+16, r24	; 0x10
     cf4:	84 e9       	ldi	r24, 0x94	; 148
     cf6:	89 8b       	std	Y+17, r24	; 0x11
     cf8:	84 ed       	ldi	r24, 0xD4	; 212
     cfa:	8a 8b       	std	Y+18, r24	; 0x12
	LCD_command(fristCharAddr[row-1] + col-1);
     cfc:	8b 89       	ldd	r24, Y+19	; 0x13
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9e 01       	movw	r18, r28
     d06:	21 5f       	subi	r18, 0xF1	; 241
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	82 0f       	add	r24, r18
     d0c:	93 1f       	adc	r25, r19
     d0e:	fc 01       	movw	r30, r24
     d10:	90 81       	ld	r25, Z
     d12:	8c 89       	ldd	r24, Y+20	; 0x14
     d14:	89 0f       	add	r24, r25
     d16:	81 50       	subi	r24, 0x01	; 1
     d18:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e8       	ldi	r26, 0x80	; 128
     d22:	bf e3       	ldi	r27, 0x3F	; 63
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	ab 83       	std	Y+3, r26	; 0x03
     d2a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a ef       	ldi	r20, 0xFA	; 250
     d32:	54 e4       	ldi	r21, 0x44	; 68
     d34:	69 81       	ldd	r22, Y+1	; 0x01
     d36:	7a 81       	ldd	r23, Y+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	8d 83       	std	Y+5, r24	; 0x05
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	af 83       	std	Y+7, r26	; 0x07
     d4a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e8       	ldi	r20, 0x80	; 128
     d52:	5f e3       	ldi	r21, 0x3F	; 63
     d54:	6d 81       	ldd	r22, Y+5	; 0x05
     d56:	7e 81       	ldd	r23, Y+6	; 0x06
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	98 85       	ldd	r25, Y+8	; 0x08
     d5c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     d60:	88 23       	and	r24, r24
     d62:	2c f4       	brge	.+10     	; 0xd6e <LCD_goToRowCol+0x9a>
		__ticks = 1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	9a 87       	std	Y+10, r25	; 0x0a
     d6a:	89 87       	std	Y+9, r24	; 0x09
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <LCD_goToRowCol+0x118>
	else if (__tmp > 65535)
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	3f ef       	ldi	r19, 0xFF	; 255
     d72:	4f e7       	ldi	r20, 0x7F	; 127
     d74:	57 e4       	ldi	r21, 0x47	; 71
     d76:	6d 81       	ldd	r22, Y+5	; 0x05
     d78:	7e 81       	ldd	r23, Y+6	; 0x06
     d7a:	8f 81       	ldd	r24, Y+7	; 0x07
     d7c:	98 85       	ldd	r25, Y+8	; 0x08
     d7e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
     d82:	18 16       	cp	r1, r24
     d84:	4c f5       	brge	.+82     	; 0xdd8 <LCD_goToRowCol+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	69 81       	ldd	r22, Y+1	; 0x01
     d90:	7a 81       	ldd	r23, Y+2	; 0x02
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	9a 87       	std	Y+10, r25	; 0x0a
     dac:	89 87       	std	Y+9, r24	; 0x09
     dae:	0f c0       	rjmp	.+30     	; 0xdce <LCD_goToRowCol+0xfa>
     db0:	88 ec       	ldi	r24, 0xC8	; 200
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 87       	std	Y+12, r25	; 0x0c
     db6:	8b 87       	std	Y+11, r24	; 0x0b
     db8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dba:	9c 85       	ldd	r25, Y+12	; 0x0c
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <LCD_goToRowCol+0xe8>
     dc0:	9c 87       	std	Y+12, r25	; 0x0c
     dc2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc4:	89 85       	ldd	r24, Y+9	; 0x09
     dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	9a 87       	std	Y+10, r25	; 0x0a
     dcc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dce:	89 85       	ldd	r24, Y+9	; 0x09
     dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd2:	89 2b       	or	r24, r25
     dd4:	69 f7       	brne	.-38     	; 0xdb0 <LCD_goToRowCol+0xdc>
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <LCD_goToRowCol+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd8:	6d 81       	ldd	r22, Y+5	; 0x05
     dda:	7e 81       	ldd	r23, Y+6	; 0x06
     ddc:	8f 81       	ldd	r24, Y+7	; 0x07
     dde:	98 85       	ldd	r25, Y+8	; 0x08
     de0:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	9a 87       	std	Y+10, r25	; 0x0a
     dea:	89 87       	std	Y+9, r24	; 0x09
     dec:	89 85       	ldd	r24, Y+9	; 0x09
     dee:	9a 85       	ldd	r25, Y+10	; 0x0a
     df0:	9e 87       	std	Y+14, r25	; 0x0e
     df2:	8d 87       	std	Y+13, r24	; 0x0d
     df4:	8d 85       	ldd	r24, Y+13	; 0x0d
     df6:	9e 85       	ldd	r25, Y+14	; 0x0e
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <LCD_goToRowCol+0x124>
     dfc:	9e 87       	std	Y+14, r25	; 0x0e
     dfe:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);

}
     e00:	64 96       	adiw	r28, 0x14	; 20
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <LCD_displayCharacter>:
void LCD_displayCharacter(unsigned char Byte ){
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	1f 92       	push	r1
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
	LCD_Data(Byte);
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_Data>
}
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <LCD_displayString>:

void LCD_displayString(unsigned char *str ){
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	00 d0       	rcall	.+0      	; 0xe32 <LCD_displayString+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	do{
		LCD_Data(*str++);
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	9c 01       	movw	r18, r24
     e40:	2f 5f       	subi	r18, 0xFF	; 255
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	3a 83       	std	Y+2, r19	; 0x02
     e46:	29 83       	std	Y+1, r18	; 0x01
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	0e 94 65 04 	call	0x8ca	; 0x8ca <LCD_Data>
	}while(*str);
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	fc 01       	movw	r30, r24
     e56:	80 81       	ld	r24, Z
     e58:	88 23       	and	r24, r24
     e5a:	79 f7       	brne	.-34     	; 0xe3a <LCD_displayString+0xe>
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <LCD_displayStringRowCol>:
void LCD_displayStringRowCol(unsigned char row , unsigned char col , unsigned char *str ){
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <LCD_displayStringRowCol+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <LCD_displayStringRowCol+0x8>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6a 83       	std	Y+2, r22	; 0x02
     e76:	5c 83       	std	Y+4, r21	; 0x04
     e78:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowCol(row , col);
     e7a:	6a 81       	ldd	r22, Y+2	; 0x02
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <LCD_goToRowCol>
	LCD_displayString(str);
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	9c 81       	ldd	r25, Y+4	; 0x04
     e86:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	08 95       	ret

00000e98 <LCD_clearScreen>:
void LCD_clearScreen(void){
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	LCD_command(0x01); //clear display
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_command>
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <LCD_intToString>:
void LCD_intToString(unsigned char hour , unsigned char min , unsigned char sec){
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	63 97       	sbiw	r28, 0x13	; 19
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	89 8b       	std	Y+17, r24	; 0x11
     ec2:	6a 8b       	std	Y+18, r22	; 0x12
     ec4:	4b 8b       	std	Y+19, r20	; 0x13
	unsigned char buff[16]; /* String to hold the ascii result */
	sprintf(buff ,"%dh:%dm:%ds" , hour , min , sec);
     ec6:	8b 89       	ldd	r24, Y+19	; 0x13
     ec8:	48 2f       	mov	r20, r24
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	8a 89       	ldd	r24, Y+18	; 0x12
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	89 89       	ldd	r24, Y+17	; 0x11
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	65 2f       	mov	r22, r21
     eda:	6f 93       	push	r22
     edc:	4f 93       	push	r20
     ede:	43 2f       	mov	r20, r19
     ee0:	4f 93       	push	r20
     ee2:	2f 93       	push	r18
     ee4:	29 2f       	mov	r18, r25
     ee6:	2f 93       	push	r18
     ee8:	8f 93       	push	r24
     eea:	84 e7       	ldi	r24, 0x74	; 116
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	89 2f       	mov	r24, r25
     ef0:	8f 93       	push	r24
     ef2:	84 e7       	ldi	r24, 0x74	; 116
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	8f 93       	push	r24
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	0e 94 97 0b 	call	0x172e	; 0x172e <sprintf>
     f04:	8d b7       	in	r24, 0x3d	; 61
     f06:	9e b7       	in	r25, 0x3e	; 62
     f08:	0a 96       	adiw	r24, 0x0a	; 10
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	// itoa(data,buff,10); /* 10 for decimal */
	 LCD_displayString(buff);
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
}
     f1c:	63 96       	adiw	r28, 0x13	; 19
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <LCD_intToString2>:
void LCD_intToString2(unsigned char m){
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	61 97       	sbiw	r28, 0x11	; 17
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	89 8b       	std	Y+17, r24	; 0x11
	unsigned char buff[16]; /* String to hold the ascii result */
	sprintf(buff ,"%d" ,m);
     f44:	89 89       	ldd	r24, Y+17	; 0x11
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	29 2f       	mov	r18, r25
     f4c:	2f 93       	push	r18
     f4e:	8f 93       	push	r24
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	89 2f       	mov	r24, r25
     f56:	8f 93       	push	r24
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	8f 93       	push	r24
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	9f 93       	push	r25
     f64:	8f 93       	push	r24
     f66:	0e 94 97 0b 	call	0x172e	; 0x172e <sprintf>
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
	// itoa(data,buff,10); /* 10 for decimal */
	 LCD_displayString(buff);
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
}
     f7e:	61 96       	adiw	r28, 0x11	; 17
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <main>:

/**
 * there two function BCDToDecimal, DecimalToBCD in rtc driver module
 * I use it in getTime , setTime function (built in)
 */
int main(){
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	aa 97       	sbiw	r28, 0x2a	; 42
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
	LCD_init();//initialize lcd
     fa4:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_init>
	RTC_init();//initialize RTC , i2c
     fa8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <RTC_init>

	LCD_displayString("welcome");
     fac:	83 e8       	ldi	r24, 0x83	; 131
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a6 e9       	ldi	r26, 0x96	; 150
     fba:	b3 e4       	ldi	r27, 0x43	; 67
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	ab 83       	std	Y+3, r26	; 0x03
     fc2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	4a ef       	ldi	r20, 0xFA	; 250
     fca:	54 e4       	ldi	r21, 0x44	; 68
     fcc:	69 81       	ldd	r22, Y+1	; 0x01
     fce:	7a 81       	ldd	r23, Y+2	; 0x02
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	af 83       	std	Y+7, r26	; 0x07
     fe2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	6d 81       	ldd	r22, Y+5	; 0x05
     fee:	7e 81       	ldd	r23, Y+6	; 0x06
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <main+0x76>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 87       	std	Y+10, r25	; 0x0a
    1002:	89 87       	std	Y+9, r24	; 0x09
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <main+0xf4>
	else if (__tmp > 65535)
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	6d 81       	ldd	r22, Y+5	; 0x05
    1010:	7e 81       	ldd	r23, Y+6	; 0x06
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	98 85       	ldd	r25, Y+8	; 0x08
    1016:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e2       	ldi	r20, 0x20	; 32
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	69 81       	ldd	r22, Y+1	; 0x01
    1028:	7a 81       	ldd	r23, Y+2	; 0x02
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9a 87       	std	Y+10, r25	; 0x0a
    1044:	89 87       	std	Y+9, r24	; 0x09
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <main+0xd6>
    1048:	88 ec       	ldi	r24, 0xC8	; 200
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	9c 87       	std	Y+12, r25	; 0x0c
    104e:	8b 87       	std	Y+11, r24	; 0x0b
    1050:	8b 85       	ldd	r24, Y+11	; 0x0b
    1052:	9c 85       	ldd	r25, Y+12	; 0x0c
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <main+0xc4>
    1058:	9c 87       	std	Y+12, r25	; 0x0c
    105a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9a 87       	std	Y+10, r25	; 0x0a
    1064:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	89 2b       	or	r24, r25
    106c:	69 f7       	brne	.-38     	; 0x1048 <main+0xb8>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6d 81       	ldd	r22, Y+5	; 0x05
    1072:	7e 81       	ldd	r23, Y+6	; 0x06
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	98 85       	ldd	r25, Y+8	; 0x08
    1078:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9a 87       	std	Y+10, r25	; 0x0a
    1082:	89 87       	std	Y+9, r24	; 0x09
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	9e 87       	std	Y+14, r25	; 0x0e
    108a:	8d 87       	std	Y+13, r24	; 0x0d
    108c:	8d 85       	ldd	r24, Y+13	; 0x0d
    108e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <main+0x100>
    1094:	9e 87       	std	Y+14, r25	; 0x0e
    1096:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(300);
	LCD_clearScreen();
    1098:	0e 94 4c 07 	call	0xe98	; 0xe98 <LCD_clearScreen>
	LCD_displayString("H=");
    109c:	8b e8       	ldi	r24, 0x8B	; 139
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
	input_hour=getTimeBCD();
    10a4:	0e 94 42 01 	call	0x284	; 0x284 <getTimeBCD>
    10a8:	80 93 96 00 	sts	0x0096, r24
	LCD_displayString(" M=");
    10ac:	8e e8       	ldi	r24, 0x8E	; 142
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
	input_min=getTimeBCD();
    10b4:	0e 94 42 01 	call	0x284	; 0x284 <getTimeBCD>
    10b8:	80 93 99 00 	sts	0x0099, r24
	LCD_displayString(" S=");
    10bc:	82 e9       	ldi	r24, 0x92	; 146
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 16 07 	call	0xe2c	; 0xe2c <LCD_displayString>
	input_sec=getTimeBCD();
    10c4:	0e 94 42 01 	call	0x284	; 0x284 <getTimeBCD>
    10c8:	80 93 97 00 	sts	0x0097, r24
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a8 e4       	ldi	r26, 0x48	; 72
    10d2:	b3 e4       	ldi	r27, 0x43	; 67
    10d4:	8f 87       	std	Y+15, r24	; 0x0f
    10d6:	98 8b       	std	Y+16, r25	; 0x10
    10d8:	a9 8b       	std	Y+17, r26	; 0x11
    10da:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4a ef       	ldi	r20, 0xFA	; 250
    10e2:	54 e4       	ldi	r21, 0x44	; 68
    10e4:	6f 85       	ldd	r22, Y+15	; 0x0f
    10e6:	78 89       	ldd	r23, Y+16	; 0x10
    10e8:	89 89       	ldd	r24, Y+17	; 0x11
    10ea:	9a 89       	ldd	r25, Y+18	; 0x12
    10ec:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	8b 8b       	std	Y+19, r24	; 0x13
    10f6:	9c 8b       	std	Y+20, r25	; 0x14
    10f8:	ad 8b       	std	Y+21, r26	; 0x15
    10fa:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	6b 89       	ldd	r22, Y+19	; 0x13
    1106:	7c 89       	ldd	r23, Y+20	; 0x14
    1108:	8d 89       	ldd	r24, Y+21	; 0x15
    110a:	9e 89       	ldd	r25, Y+22	; 0x16
    110c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
    1110:	88 23       	and	r24, r24
    1112:	2c f4       	brge	.+10     	; 0x111e <main+0x18e>
		__ticks = 1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	98 8f       	std	Y+24, r25	; 0x18
    111a:	8f 8b       	std	Y+23, r24	; 0x17
    111c:	3f c0       	rjmp	.+126    	; 0x119c <main+0x20c>
	else if (__tmp > 65535)
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	57 e4       	ldi	r21, 0x47	; 71
    1126:	6b 89       	ldd	r22, Y+19	; 0x13
    1128:	7c 89       	ldd	r23, Y+20	; 0x14
    112a:	8d 89       	ldd	r24, Y+21	; 0x15
    112c:	9e 89       	ldd	r25, Y+22	; 0x16
    112e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
    1132:	18 16       	cp	r1, r24
    1134:	4c f5       	brge	.+82     	; 0x1188 <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e2       	ldi	r20, 0x20	; 32
    113c:	51 e4       	ldi	r21, 0x41	; 65
    113e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1140:	78 89       	ldd	r23, Y+16	; 0x10
    1142:	89 89       	ldd	r24, Y+17	; 0x11
    1144:	9a 89       	ldd	r25, Y+18	; 0x12
    1146:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	98 8f       	std	Y+24, r25	; 0x18
    115c:	8f 8b       	std	Y+23, r24	; 0x17
    115e:	0f c0       	rjmp	.+30     	; 0x117e <main+0x1ee>
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9a 8f       	std	Y+26, r25	; 0x1a
    1166:	89 8f       	std	Y+25, r24	; 0x19
    1168:	89 8d       	ldd	r24, Y+25	; 0x19
    116a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <main+0x1dc>
    1170:	9a 8f       	std	Y+26, r25	; 0x1a
    1172:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1174:	8f 89       	ldd	r24, Y+23	; 0x17
    1176:	98 8d       	ldd	r25, Y+24	; 0x18
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	98 8f       	std	Y+24, r25	; 0x18
    117c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117e:	8f 89       	ldd	r24, Y+23	; 0x17
    1180:	98 8d       	ldd	r25, Y+24	; 0x18
    1182:	89 2b       	or	r24, r25
    1184:	69 f7       	brne	.-38     	; 0x1160 <main+0x1d0>
    1186:	14 c0       	rjmp	.+40     	; 0x11b0 <main+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1188:	6b 89       	ldd	r22, Y+19	; 0x13
    118a:	7c 89       	ldd	r23, Y+20	; 0x14
    118c:	8d 89       	ldd	r24, Y+21	; 0x15
    118e:	9e 89       	ldd	r25, Y+22	; 0x16
    1190:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	98 8f       	std	Y+24, r25	; 0x18
    119a:	8f 8b       	std	Y+23, r24	; 0x17
    119c:	8f 89       	ldd	r24, Y+23	; 0x17
    119e:	98 8d       	ldd	r25, Y+24	; 0x18
    11a0:	9c 8f       	std	Y+28, r25	; 0x1c
    11a2:	8b 8f       	std	Y+27, r24	; 0x1b
    11a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <main+0x218>
    11ac:	9c 8f       	std	Y+28, r25	; 0x1c
    11ae:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(200);

	setTime(input_hour , input_min , input_sec);
    11b0:	20 91 97 00 	lds	r18, 0x0097
    11b4:	90 91 99 00 	lds	r25, 0x0099
    11b8:	80 91 96 00 	lds	r24, 0x0096
    11bc:	42 2f       	mov	r20, r18
    11be:	69 2f       	mov	r22, r25
    11c0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <setTime>
	LCD_clearScreen();
    11c4:	0e 94 4c 07 	call	0xe98	; 0xe98 <LCD_clearScreen>
	while(1){
		getTime(&recieve_hour , &recieve_min , &recieve_sec);
    11c8:	4b e9       	ldi	r20, 0x9B	; 155
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	68 e9       	ldi	r22, 0x98	; 152
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	8a e9       	ldi	r24, 0x9A	; 154
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 2e 0a 	call	0x145c	; 0x145c <getTime>
		LCD_intToString(recieve_hour , recieve_min , recieve_sec);
    11d8:	20 91 9b 00 	lds	r18, 0x009B
    11dc:	90 91 98 00 	lds	r25, 0x0098
    11e0:	80 91 9a 00 	lds	r24, 0x009A
    11e4:	42 2f       	mov	r20, r18
    11e6:	69 2f       	mov	r22, r25
    11e8:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_intToString>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a8 ec       	ldi	r26, 0xC8	; 200
    11f2:	b2 e4       	ldi	r27, 0x42	; 66
    11f4:	8d 8f       	std	Y+29, r24	; 0x1d
    11f6:	9e 8f       	std	Y+30, r25	; 0x1e
    11f8:	af 8f       	std	Y+31, r26	; 0x1f
    11fa:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1206:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1208:	8f 8d       	ldd	r24, Y+31	; 0x1f
    120a:	98 a1       	ldd	r25, Y+32	; 0x20
    120c:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	89 a3       	std	Y+33, r24	; 0x21
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	ab a3       	std	Y+35, r26	; 0x23
    121a:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	69 a1       	ldd	r22, Y+33	; 0x21
    1226:	7a a1       	ldd	r23, Y+34	; 0x22
    1228:	8b a1       	ldd	r24, Y+35	; 0x23
    122a:	9c a1       	ldd	r25, Y+36	; 0x24
    122c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__cmpsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <main+0x2ae>
		__ticks = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9e a3       	std	Y+38, r25	; 0x26
    123a:	8d a3       	std	Y+37, r24	; 0x25
    123c:	3f c0       	rjmp	.+126    	; 0x12bc <main+0x32c>
	else if (__tmp > 65535)
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	69 a1       	ldd	r22, Y+33	; 0x21
    1248:	7a a1       	ldd	r23, Y+34	; 0x22
    124a:	8b a1       	ldd	r24, Y+35	; 0x23
    124c:	9c a1       	ldd	r25, Y+36	; 0x24
    124e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__gesf2>
    1252:	18 16       	cp	r1, r24
    1254:	4c f5       	brge	.+82     	; 0x12a8 <main+0x318>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1260:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1262:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1264:	98 a1       	ldd	r25, Y+32	; 0x20
    1266:	0e 94 02 0b 	call	0x1604	; 0x1604 <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e a3       	std	Y+38, r25	; 0x26
    127c:	8d a3       	std	Y+37, r24	; 0x25
    127e:	0f c0       	rjmp	.+30     	; 0x129e <main+0x30e>
    1280:	88 ec       	ldi	r24, 0xC8	; 200
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	98 a7       	std	Y+40, r25	; 0x28
    1286:	8f a3       	std	Y+39, r24	; 0x27
    1288:	8f a1       	ldd	r24, Y+39	; 0x27
    128a:	98 a5       	ldd	r25, Y+40	; 0x28
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <main+0x2fc>
    1290:	98 a7       	std	Y+40, r25	; 0x28
    1292:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	8d a1       	ldd	r24, Y+37	; 0x25
    1296:	9e a1       	ldd	r25, Y+38	; 0x26
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9e a3       	std	Y+38, r25	; 0x26
    129c:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	8d a1       	ldd	r24, Y+37	; 0x25
    12a0:	9e a1       	ldd	r25, Y+38	; 0x26
    12a2:	89 2b       	or	r24, r25
    12a4:	69 f7       	brne	.-38     	; 0x1280 <main+0x2f0>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <main+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	69 a1       	ldd	r22, Y+33	; 0x21
    12aa:	7a a1       	ldd	r23, Y+34	; 0x22
    12ac:	8b a1       	ldd	r24, Y+35	; 0x23
    12ae:	9c a1       	ldd	r25, Y+36	; 0x24
    12b0:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e a3       	std	Y+38, r25	; 0x26
    12ba:	8d a3       	std	Y+37, r24	; 0x25
    12bc:	8d a1       	ldd	r24, Y+37	; 0x25
    12be:	9e a1       	ldd	r25, Y+38	; 0x26
    12c0:	9a a7       	std	Y+42, r25	; 0x2a
    12c2:	89 a7       	std	Y+41, r24	; 0x29
    12c4:	89 a5       	ldd	r24, Y+41	; 0x29
    12c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <main+0x338>
    12cc:	9a a7       	std	Y+42, r25	; 0x2a
    12ce:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(100);
		LCD_clearScreen();
    12d0:	0e 94 4c 07 	call	0xe98	; 0xe98 <LCD_clearScreen>
	}
    12d4:	79 cf       	rjmp	.-270    	; 0x11c8 <main+0x238>

000012d6 <RTC_init>:
 */

#include "rtc.h"


void RTC_init(){
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	I2C_init();
    12de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <I2C_init>
	I2C_start();
    12e2:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD0);
    12e6:	80 ed       	ldi	r24, 0xD0	; 208
    12e8:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(0X07);
    12ec:	87 e0       	ldi	r24, 0x07	; 7
    12ee:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(0x00);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_stop();
    12f8:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>
}
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	08 95       	ret

00001302 <writeRTC>:
void writeRTC(unsigned char address, unsigned char data){
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	00 d0       	rcall	.+0      	; 0x1308 <writeRTC+0x6>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	6a 83       	std	Y+2, r22	; 0x02

	I2C_start();
    1310:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD0);//bit0 =0 ; for write
    1314:	80 ed       	ldi	r24, 0xD0	; 208
    1316:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(address);
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(data);
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_stop();
    1326:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <readRTC>:

unsigned char readRTC(unsigned char address){
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	00 d0       	rcall	.+0      	; 0x133a <readRTC+0x6>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char data;
	I2C_start();
    1340:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD0);//bit0 =0 ; for write
    1344:	80 ed       	ldi	r24, 0xD0	; 208
    1346:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(0x00);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_stop();
    1350:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>

	I2C_start();
    1354:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD1);//bit0 =1 ; for read
    1358:	81 ed       	ldi	r24, 0xD1	; 209
    135a:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(address);
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	data =I2C_read(1);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_read>
    136a:	89 83       	std	Y+1, r24	; 0x01
	I2C_stop();
    136c:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>
	return data;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
}
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <BCDToDecimal>:

unsigned char BCDToDecimal(unsigned char  bcdbyte){
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	1f 92       	push	r1
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	89 83       	std	Y+1, r24	; 0x01
	return (( ( (bcdbyte & 0xF0)>>4) * 10) + (bcdbyte & 0x0F));
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	82 95       	swap	r24
    138c:	8f 70       	andi	r24, 0x0F	; 15
    138e:	88 0f       	add	r24, r24
    1390:	98 2f       	mov	r25, r24
    1392:	99 0f       	add	r25, r25
    1394:	99 0f       	add	r25, r25
    1396:	98 0f       	add	r25, r24
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	8f 70       	andi	r24, 0x0F	; 15
    139c:	89 0f       	add	r24, r25
}
    139e:	0f 90       	pop	r0
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <DecimalToBCD>:

unsigned char DecimalToBCD(unsigned char decimalbyte){
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	1f 92       	push	r1
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
	return (( ( (decimalbyte /10)<<4) ) | (decimalbyte % 10));
    13b2:	99 81       	ldd	r25, Y+1	; 0x01
    13b4:	8d ec       	ldi	r24, 0xCD	; 205
    13b6:	98 9f       	mul	r25, r24
    13b8:	81 2d       	mov	r24, r1
    13ba:	11 24       	eor	r1, r1
    13bc:	86 95       	lsr	r24
    13be:	86 95       	lsr	r24
    13c0:	86 95       	lsr	r24
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	82 95       	swap	r24
    13c8:	92 95       	swap	r25
    13ca:	90 7f       	andi	r25, 0xF0	; 240
    13cc:	98 27       	eor	r25, r24
    13ce:	80 7f       	andi	r24, 0xF0	; 240
    13d0:	98 27       	eor	r25, r24
    13d2:	38 2f       	mov	r19, r24
    13d4:	99 81       	ldd	r25, Y+1	; 0x01
    13d6:	8d ec       	ldi	r24, 0xCD	; 205
    13d8:	98 9f       	mul	r25, r24
    13da:	81 2d       	mov	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	86 95       	lsr	r24
    13e0:	86 95       	lsr	r24
    13e2:	86 95       	lsr	r24
    13e4:	88 0f       	add	r24, r24
    13e6:	28 2f       	mov	r18, r24
    13e8:	22 0f       	add	r18, r18
    13ea:	22 0f       	add	r18, r18
    13ec:	82 0f       	add	r24, r18
    13ee:	29 2f       	mov	r18, r25
    13f0:	28 1b       	sub	r18, r24
    13f2:	82 2f       	mov	r24, r18
    13f4:	83 2b       	or	r24, r19
}
    13f6:	0f 90       	pop	r0
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <setTime>:

void setTime(unsigned char hour , unsigned char min , unsigned char sec){
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 d0       	rcall	.+0      	; 0x1404 <setTime+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <setTime+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	8a 83       	std	Y+2, r24	; 0x02
    140c:	6b 83       	std	Y+3, r22	; 0x03
    140e:	4c 83       	std	Y+4, r20	; 0x04
	unsigned char tmp_bcd;
	I2C_start();
    1410:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD0);//bit0 =0 ; for write
    1414:	80 ed       	ldi	r24, 0xD0	; 208
    1416:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(0x00);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	tmp_bcd=DecimalToBCD(sec);
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DecimalToBCD>
    1426:	89 83       	std	Y+1, r24	; 0x01
	I2C_write(tmp_bcd);
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	tmp_bcd=DecimalToBCD(min);
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DecimalToBCD>
    1434:	89 83       	std	Y+1, r24	; 0x01
	I2C_write(tmp_bcd);
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	tmp_bcd=DecimalToBCD(hour);
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DecimalToBCD>
    1442:	89 83       	std	Y+1, r24	; 0x01
	I2C_write(tmp_bcd);
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_stop();
    144a:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>

}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <getTime>:

void getTime(unsigned char *hour , unsigned char *min , unsigned char *sec){
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	27 97       	sbiw	r28, 0x07	; 7
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	9b 83       	std	Y+3, r25	; 0x03
    1472:	8a 83       	std	Y+2, r24	; 0x02
    1474:	7d 83       	std	Y+5, r23	; 0x05
    1476:	6c 83       	std	Y+4, r22	; 0x04
    1478:	5f 83       	std	Y+7, r21	; 0x07
    147a:	4e 83       	std	Y+6, r20	; 0x06
	unsigned char tmp_bcd;
	I2C_start();
    147c:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD0);//bit0 =0 ; for write
    1480:	80 ed       	ldi	r24, 0xD0	; 208
    1482:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_write(0x00);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	I2C_stop();
    148c:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>

	I2C_start();
    1490:	0e 94 ad 01 	call	0x35a	; 0x35a <I2C_start>
	I2C_write(0XD1);//bit0 =0 ; for write
    1494:	81 ed       	ldi	r24, 0xD1	; 209
    1496:	0e 94 cc 01 	call	0x398	; 0x398 <I2C_write>
	tmp_bcd =I2C_read(0);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_read>
    14a0:	89 83       	std	Y+1, r24	; 0x01
	*sec=BCDToDecimal(tmp_bcd);
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	0e 94 be 09 	call	0x137c	; 0x137c <BCDToDecimal>
    14a8:	28 2f       	mov	r18, r24
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	9f 81       	ldd	r25, Y+7	; 0x07
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18
	tmp_bcd=I2C_read(0);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_read>
    14b8:	89 83       	std	Y+1, r24	; 0x01
	*min=BCDToDecimal(tmp_bcd);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	0e 94 be 09 	call	0x137c	; 0x137c <BCDToDecimal>
    14c0:	28 2f       	mov	r18, r24
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
	tmp_bcd =I2C_read(1);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <I2C_read>
    14d0:	89 83       	std	Y+1, r24	; 0x01
	*hour=BCDToDecimal(tmp_bcd);
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	0e 94 be 09 	call	0x137c	; 0x137c <BCDToDecimal>
    14d8:	28 2f       	mov	r18, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18

	I2C_stop();
    14e2:	0e 94 c0 01 	call	0x380	; 0x380 <I2C_stop>

}
    14e6:	27 96       	adiw	r28, 0x07	; 7
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <__cmpsf2>:
    14f8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_cmp>
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <__cmpsf2+0x8>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	08 95       	ret

00001502 <__fixunssfsi>:
    1502:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_splitA>
    1506:	88 f0       	brcs	.+34     	; 0x152a <__fixunssfsi+0x28>
    1508:	9f 57       	subi	r25, 0x7F	; 127
    150a:	98 f0       	brcs	.+38     	; 0x1532 <__fixunssfsi+0x30>
    150c:	b9 2f       	mov	r27, r25
    150e:	99 27       	eor	r25, r25
    1510:	b7 51       	subi	r27, 0x17	; 23
    1512:	b0 f0       	brcs	.+44     	; 0x1540 <__fixunssfsi+0x3e>
    1514:	e1 f0       	breq	.+56     	; 0x154e <__fixunssfsi+0x4c>
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	88 1f       	adc	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	1a f0       	brmi	.+6      	; 0x1526 <__fixunssfsi+0x24>
    1520:	ba 95       	dec	r27
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__fixunssfsi+0x14>
    1524:	14 c0       	rjmp	.+40     	; 0x154e <__fixunssfsi+0x4c>
    1526:	b1 30       	cpi	r27, 0x01	; 1
    1528:	91 f0       	breq	.+36     	; 0x154e <__fixunssfsi+0x4c>
    152a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_zero>
    152e:	b1 e0       	ldi	r27, 0x01	; 1
    1530:	08 95       	ret
    1532:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__fp_zero>
    1536:	67 2f       	mov	r22, r23
    1538:	78 2f       	mov	r23, r24
    153a:	88 27       	eor	r24, r24
    153c:	b8 5f       	subi	r27, 0xF8	; 248
    153e:	39 f0       	breq	.+14     	; 0x154e <__fixunssfsi+0x4c>
    1540:	b9 3f       	cpi	r27, 0xF9	; 249
    1542:	cc f3       	brlt	.-14     	; 0x1536 <__fixunssfsi+0x34>
    1544:	86 95       	lsr	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	b3 95       	inc	r27
    154c:	d9 f7       	brne	.-10     	; 0x1544 <__fixunssfsi+0x42>
    154e:	3e f4       	brtc	.+14     	; 0x155e <__fixunssfsi+0x5c>
    1550:	90 95       	com	r25
    1552:	80 95       	com	r24
    1554:	70 95       	com	r23
    1556:	61 95       	neg	r22
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	8f 4f       	sbci	r24, 0xFF	; 255
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	08 95       	ret

00001560 <__fp_cmp>:
    1560:	99 0f       	add	r25, r25
    1562:	00 08       	sbc	r0, r0
    1564:	55 0f       	add	r21, r21
    1566:	aa 0b       	sbc	r26, r26
    1568:	e0 e8       	ldi	r30, 0x80	; 128
    156a:	fe ef       	ldi	r31, 0xFE	; 254
    156c:	16 16       	cp	r1, r22
    156e:	17 06       	cpc	r1, r23
    1570:	e8 07       	cpc	r30, r24
    1572:	f9 07       	cpc	r31, r25
    1574:	c0 f0       	brcs	.+48     	; 0x15a6 <__fp_cmp+0x46>
    1576:	12 16       	cp	r1, r18
    1578:	13 06       	cpc	r1, r19
    157a:	e4 07       	cpc	r30, r20
    157c:	f5 07       	cpc	r31, r21
    157e:	98 f0       	brcs	.+38     	; 0x15a6 <__fp_cmp+0x46>
    1580:	62 1b       	sub	r22, r18
    1582:	73 0b       	sbc	r23, r19
    1584:	84 0b       	sbc	r24, r20
    1586:	95 0b       	sbc	r25, r21
    1588:	39 f4       	brne	.+14     	; 0x1598 <__fp_cmp+0x38>
    158a:	0a 26       	eor	r0, r26
    158c:	61 f0       	breq	.+24     	; 0x15a6 <__fp_cmp+0x46>
    158e:	23 2b       	or	r18, r19
    1590:	24 2b       	or	r18, r20
    1592:	25 2b       	or	r18, r21
    1594:	21 f4       	brne	.+8      	; 0x159e <__fp_cmp+0x3e>
    1596:	08 95       	ret
    1598:	0a 26       	eor	r0, r26
    159a:	09 f4       	brne	.+2      	; 0x159e <__fp_cmp+0x3e>
    159c:	a1 40       	sbci	r26, 0x01	; 1
    159e:	a6 95       	lsr	r26
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	81 1d       	adc	r24, r1
    15a4:	81 1d       	adc	r24, r1
    15a6:	08 95       	ret

000015a8 <__fp_split3>:
    15a8:	57 fd       	sbrc	r21, 7
    15aa:	90 58       	subi	r25, 0x80	; 128
    15ac:	44 0f       	add	r20, r20
    15ae:	55 1f       	adc	r21, r21
    15b0:	59 f0       	breq	.+22     	; 0x15c8 <__fp_splitA+0x10>
    15b2:	5f 3f       	cpi	r21, 0xFF	; 255
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <__fp_splitA+0x1a>
    15b6:	47 95       	ror	r20

000015b8 <__fp_splitA>:
    15b8:	88 0f       	add	r24, r24
    15ba:	97 fb       	bst	r25, 7
    15bc:	99 1f       	adc	r25, r25
    15be:	61 f0       	breq	.+24     	; 0x15d8 <__fp_splitA+0x20>
    15c0:	9f 3f       	cpi	r25, 0xFF	; 255
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <__fp_splitA+0x2a>
    15c4:	87 95       	ror	r24
    15c6:	08 95       	ret
    15c8:	12 16       	cp	r1, r18
    15ca:	13 06       	cpc	r1, r19
    15cc:	14 06       	cpc	r1, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	f2 cf       	rjmp	.-28     	; 0x15b6 <__fp_split3+0xe>
    15d2:	46 95       	lsr	r20
    15d4:	f1 df       	rcall	.-30     	; 0x15b8 <__fp_splitA>
    15d6:	08 c0       	rjmp	.+16     	; 0x15e8 <__fp_splitA+0x30>
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	f1 cf       	rjmp	.-30     	; 0x15c4 <__fp_splitA+0xc>
    15e2:	86 95       	lsr	r24
    15e4:	71 05       	cpc	r23, r1
    15e6:	61 05       	cpc	r22, r1
    15e8:	08 94       	sec
    15ea:	08 95       	ret

000015ec <__fp_zero>:
    15ec:	e8 94       	clt

000015ee <__fp_szero>:
    15ee:	bb 27       	eor	r27, r27
    15f0:	66 27       	eor	r22, r22
    15f2:	77 27       	eor	r23, r23
    15f4:	cb 01       	movw	r24, r22
    15f6:	97 f9       	bld	r25, 7
    15f8:	08 95       	ret

000015fa <__gesf2>:
    15fa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_cmp>
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <__gesf2+0x8>
    1600:	8f ef       	ldi	r24, 0xFF	; 255
    1602:	08 95       	ret

00001604 <__mulsf3>:
    1604:	0e 94 15 0b 	call	0x162a	; 0x162a <__mulsf3x>
    1608:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_round>
    160c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fp_pscA>
    1610:	38 f0       	brcs	.+14     	; 0x1620 <__mulsf3+0x1c>
    1612:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_pscB>
    1616:	20 f0       	brcs	.+8      	; 0x1620 <__mulsf3+0x1c>
    1618:	95 23       	and	r25, r21
    161a:	11 f0       	breq	.+4      	; 0x1620 <__mulsf3+0x1c>
    161c:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_inf>
    1620:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__fp_nan>
    1624:	11 24       	eor	r1, r1
    1626:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>

0000162a <__mulsf3x>:
    162a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_split3>
    162e:	70 f3       	brcs	.-36     	; 0x160c <__mulsf3+0x8>

00001630 <__mulsf3_pse>:
    1630:	95 9f       	mul	r25, r21
    1632:	c1 f3       	breq	.-16     	; 0x1624 <__mulsf3+0x20>
    1634:	95 0f       	add	r25, r21
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	55 1f       	adc	r21, r21
    163a:	62 9f       	mul	r22, r18
    163c:	f0 01       	movw	r30, r0
    163e:	72 9f       	mul	r23, r18
    1640:	bb 27       	eor	r27, r27
    1642:	f0 0d       	add	r31, r0
    1644:	b1 1d       	adc	r27, r1
    1646:	63 9f       	mul	r22, r19
    1648:	aa 27       	eor	r26, r26
    164a:	f0 0d       	add	r31, r0
    164c:	b1 1d       	adc	r27, r1
    164e:	aa 1f       	adc	r26, r26
    1650:	64 9f       	mul	r22, r20
    1652:	66 27       	eor	r22, r22
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	66 1f       	adc	r22, r22
    165a:	82 9f       	mul	r24, r18
    165c:	22 27       	eor	r18, r18
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	62 1f       	adc	r22, r18
    1664:	73 9f       	mul	r23, r19
    1666:	b0 0d       	add	r27, r0
    1668:	a1 1d       	adc	r26, r1
    166a:	62 1f       	adc	r22, r18
    166c:	83 9f       	mul	r24, r19
    166e:	a0 0d       	add	r26, r0
    1670:	61 1d       	adc	r22, r1
    1672:	22 1f       	adc	r18, r18
    1674:	74 9f       	mul	r23, r20
    1676:	33 27       	eor	r19, r19
    1678:	a0 0d       	add	r26, r0
    167a:	61 1d       	adc	r22, r1
    167c:	23 1f       	adc	r18, r19
    167e:	84 9f       	mul	r24, r20
    1680:	60 0d       	add	r22, r0
    1682:	21 1d       	adc	r18, r1
    1684:	82 2f       	mov	r24, r18
    1686:	76 2f       	mov	r23, r22
    1688:	6a 2f       	mov	r22, r26
    168a:	11 24       	eor	r1, r1
    168c:	9f 57       	subi	r25, 0x7F	; 127
    168e:	50 40       	sbci	r21, 0x00	; 0
    1690:	9a f0       	brmi	.+38     	; 0x16b8 <__mulsf3_pse+0x88>
    1692:	f1 f0       	breq	.+60     	; 0x16d0 <__mulsf3_pse+0xa0>
    1694:	88 23       	and	r24, r24
    1696:	4a f0       	brmi	.+18     	; 0x16aa <__mulsf3_pse+0x7a>
    1698:	ee 0f       	add	r30, r30
    169a:	ff 1f       	adc	r31, r31
    169c:	bb 1f       	adc	r27, r27
    169e:	66 1f       	adc	r22, r22
    16a0:	77 1f       	adc	r23, r23
    16a2:	88 1f       	adc	r24, r24
    16a4:	91 50       	subi	r25, 0x01	; 1
    16a6:	50 40       	sbci	r21, 0x00	; 0
    16a8:	a9 f7       	brne	.-22     	; 0x1694 <__mulsf3_pse+0x64>
    16aa:	9e 3f       	cpi	r25, 0xFE	; 254
    16ac:	51 05       	cpc	r21, r1
    16ae:	80 f0       	brcs	.+32     	; 0x16d0 <__mulsf3_pse+0xa0>
    16b0:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_inf>
    16b4:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>
    16b8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ba:	e4 f3       	brlt	.-8      	; 0x16b4 <__mulsf3_pse+0x84>
    16bc:	98 3e       	cpi	r25, 0xE8	; 232
    16be:	d4 f3       	brlt	.-12     	; 0x16b4 <__mulsf3_pse+0x84>
    16c0:	86 95       	lsr	r24
    16c2:	77 95       	ror	r23
    16c4:	67 95       	ror	r22
    16c6:	b7 95       	ror	r27
    16c8:	f7 95       	ror	r31
    16ca:	e7 95       	ror	r30
    16cc:	9f 5f       	subi	r25, 0xFF	; 255
    16ce:	c1 f7       	brne	.-16     	; 0x16c0 <__mulsf3_pse+0x90>
    16d0:	fe 2b       	or	r31, r30
    16d2:	88 0f       	add	r24, r24
    16d4:	91 1d       	adc	r25, r1
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__fp_inf>:
    16de:	97 f9       	bld	r25, 7
    16e0:	9f 67       	ori	r25, 0x7F	; 127
    16e2:	80 e8       	ldi	r24, 0x80	; 128
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	08 95       	ret

000016ea <__fp_nan>:
    16ea:	9f ef       	ldi	r25, 0xFF	; 255
    16ec:	80 ec       	ldi	r24, 0xC0	; 192
    16ee:	08 95       	ret

000016f0 <__fp_pscA>:
    16f0:	00 24       	eor	r0, r0
    16f2:	0a 94       	dec	r0
    16f4:	16 16       	cp	r1, r22
    16f6:	17 06       	cpc	r1, r23
    16f8:	18 06       	cpc	r1, r24
    16fa:	09 06       	cpc	r0, r25
    16fc:	08 95       	ret

000016fe <__fp_pscB>:
    16fe:	00 24       	eor	r0, r0
    1700:	0a 94       	dec	r0
    1702:	12 16       	cp	r1, r18
    1704:	13 06       	cpc	r1, r19
    1706:	14 06       	cpc	r1, r20
    1708:	05 06       	cpc	r0, r21
    170a:	08 95       	ret

0000170c <__fp_round>:
    170c:	09 2e       	mov	r0, r25
    170e:	03 94       	inc	r0
    1710:	00 0c       	add	r0, r0
    1712:	11 f4       	brne	.+4      	; 0x1718 <__fp_round+0xc>
    1714:	88 23       	and	r24, r24
    1716:	52 f0       	brmi	.+20     	; 0x172c <__fp_round+0x20>
    1718:	bb 0f       	add	r27, r27
    171a:	40 f4       	brcc	.+16     	; 0x172c <__fp_round+0x20>
    171c:	bf 2b       	or	r27, r31
    171e:	11 f4       	brne	.+4      	; 0x1724 <__fp_round+0x18>
    1720:	60 ff       	sbrs	r22, 0
    1722:	04 c0       	rjmp	.+8      	; 0x172c <__fp_round+0x20>
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8f 4f       	sbci	r24, 0xFF	; 255
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	08 95       	ret

0000172e <sprintf>:
    172e:	ae e0       	ldi	r26, 0x0E	; 14
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e9       	ldi	r30, 0x9D	; 157
    1734:	fb e0       	ldi	r31, 0x0B	; 11
    1736:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__prologue_saves__+0x1c>
    173a:	0d 89       	ldd	r16, Y+21	; 0x15
    173c:	1e 89       	ldd	r17, Y+22	; 0x16
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	8c 83       	std	Y+4, r24	; 0x04
    1742:	1a 83       	std	Y+2, r17	; 0x02
    1744:	09 83       	std	Y+1, r16	; 0x01
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f e7       	ldi	r25, 0x7F	; 127
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	ae 01       	movw	r20, r28
    1750:	47 5e       	subi	r20, 0xE7	; 231
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	6f 89       	ldd	r22, Y+23	; 0x17
    1756:	78 8d       	ldd	r23, Y+24	; 0x18
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <vfprintf>
    1760:	2f 81       	ldd	r18, Y+7	; 0x07
    1762:	38 85       	ldd	r19, Y+8	; 0x08
    1764:	f8 01       	movw	r30, r16
    1766:	e2 0f       	add	r30, r18
    1768:	f3 1f       	adc	r31, r19
    176a:	10 82       	st	Z, r1
    176c:	2e 96       	adiw	r28, 0x0e	; 14
    176e:	e4 e0       	ldi	r30, 0x04	; 4
    1770:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__epilogue_restores__+0x1c>

00001774 <vfprintf>:
    1774:	ac e0       	ldi	r26, 0x0C	; 12
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 ec       	ldi	r30, 0xC0	; 192
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <__prologue_saves__>
    1780:	7c 01       	movw	r14, r24
    1782:	6b 01       	movw	r12, r22
    1784:	8a 01       	movw	r16, r20
    1786:	fc 01       	movw	r30, r24
    1788:	17 82       	std	Z+7, r1	; 0x07
    178a:	16 82       	std	Z+6, r1	; 0x06
    178c:	83 81       	ldd	r24, Z+3	; 0x03
    178e:	81 ff       	sbrs	r24, 1
    1790:	bd c1       	rjmp	.+890    	; 0x1b0c <vfprintf+0x398>
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	4c 01       	movw	r8, r24
    1798:	f7 01       	movw	r30, r14
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	f6 01       	movw	r30, r12
    179e:	93 fd       	sbrc	r25, 3
    17a0:	85 91       	lpm	r24, Z+
    17a2:	93 ff       	sbrs	r25, 3
    17a4:	81 91       	ld	r24, Z+
    17a6:	6f 01       	movw	r12, r30
    17a8:	88 23       	and	r24, r24
    17aa:	09 f4       	brne	.+2      	; 0x17ae <vfprintf+0x3a>
    17ac:	ab c1       	rjmp	.+854    	; 0x1b04 <vfprintf+0x390>
    17ae:	85 32       	cpi	r24, 0x25	; 37
    17b0:	39 f4       	brne	.+14     	; 0x17c0 <vfprintf+0x4c>
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	6f 01       	movw	r12, r30
    17bc:	85 32       	cpi	r24, 0x25	; 37
    17be:	29 f4       	brne	.+10     	; 0x17ca <vfprintf+0x56>
    17c0:	b7 01       	movw	r22, r14
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    17c8:	e7 cf       	rjmp	.-50     	; 0x1798 <vfprintf+0x24>
    17ca:	51 2c       	mov	r5, r1
    17cc:	31 2c       	mov	r3, r1
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	20 32       	cpi	r18, 0x20	; 32
    17d2:	a0 f4       	brcc	.+40     	; 0x17fc <vfprintf+0x88>
    17d4:	8b 32       	cpi	r24, 0x2B	; 43
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <vfprintf+0x7e>
    17d8:	30 f4       	brcc	.+12     	; 0x17e6 <vfprintf+0x72>
    17da:	80 32       	cpi	r24, 0x20	; 32
    17dc:	59 f0       	breq	.+22     	; 0x17f4 <vfprintf+0x80>
    17de:	83 32       	cpi	r24, 0x23	; 35
    17e0:	69 f4       	brne	.+26     	; 0x17fc <vfprintf+0x88>
    17e2:	20 61       	ori	r18, 0x10	; 16
    17e4:	2c c0       	rjmp	.+88     	; 0x183e <vfprintf+0xca>
    17e6:	8d 32       	cpi	r24, 0x2D	; 45
    17e8:	39 f0       	breq	.+14     	; 0x17f8 <vfprintf+0x84>
    17ea:	80 33       	cpi	r24, 0x30	; 48
    17ec:	39 f4       	brne	.+14     	; 0x17fc <vfprintf+0x88>
    17ee:	21 60       	ori	r18, 0x01	; 1
    17f0:	26 c0       	rjmp	.+76     	; 0x183e <vfprintf+0xca>
    17f2:	22 60       	ori	r18, 0x02	; 2
    17f4:	24 60       	ori	r18, 0x04	; 4
    17f6:	23 c0       	rjmp	.+70     	; 0x183e <vfprintf+0xca>
    17f8:	28 60       	ori	r18, 0x08	; 8
    17fa:	21 c0       	rjmp	.+66     	; 0x183e <vfprintf+0xca>
    17fc:	27 fd       	sbrc	r18, 7
    17fe:	27 c0       	rjmp	.+78     	; 0x184e <vfprintf+0xda>
    1800:	30 ed       	ldi	r19, 0xD0	; 208
    1802:	38 0f       	add	r19, r24
    1804:	3a 30       	cpi	r19, 0x0A	; 10
    1806:	78 f4       	brcc	.+30     	; 0x1826 <vfprintf+0xb2>
    1808:	26 ff       	sbrs	r18, 6
    180a:	06 c0       	rjmp	.+12     	; 0x1818 <vfprintf+0xa4>
    180c:	fa e0       	ldi	r31, 0x0A	; 10
    180e:	5f 9e       	mul	r5, r31
    1810:	30 0d       	add	r19, r0
    1812:	11 24       	eor	r1, r1
    1814:	53 2e       	mov	r5, r19
    1816:	13 c0       	rjmp	.+38     	; 0x183e <vfprintf+0xca>
    1818:	8a e0       	ldi	r24, 0x0A	; 10
    181a:	38 9e       	mul	r3, r24
    181c:	30 0d       	add	r19, r0
    181e:	11 24       	eor	r1, r1
    1820:	33 2e       	mov	r3, r19
    1822:	20 62       	ori	r18, 0x20	; 32
    1824:	0c c0       	rjmp	.+24     	; 0x183e <vfprintf+0xca>
    1826:	8e 32       	cpi	r24, 0x2E	; 46
    1828:	21 f4       	brne	.+8      	; 0x1832 <vfprintf+0xbe>
    182a:	26 fd       	sbrc	r18, 6
    182c:	6b c1       	rjmp	.+726    	; 0x1b04 <vfprintf+0x390>
    182e:	20 64       	ori	r18, 0x40	; 64
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0xca>
    1832:	8c 36       	cpi	r24, 0x6C	; 108
    1834:	11 f4       	brne	.+4      	; 0x183a <vfprintf+0xc6>
    1836:	20 68       	ori	r18, 0x80	; 128
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0xca>
    183a:	88 36       	cpi	r24, 0x68	; 104
    183c:	41 f4       	brne	.+16     	; 0x184e <vfprintf+0xda>
    183e:	f6 01       	movw	r30, r12
    1840:	93 fd       	sbrc	r25, 3
    1842:	85 91       	lpm	r24, Z+
    1844:	93 ff       	sbrs	r25, 3
    1846:	81 91       	ld	r24, Z+
    1848:	6f 01       	movw	r12, r30
    184a:	81 11       	cpse	r24, r1
    184c:	c1 cf       	rjmp	.-126    	; 0x17d0 <vfprintf+0x5c>
    184e:	98 2f       	mov	r25, r24
    1850:	9f 7d       	andi	r25, 0xDF	; 223
    1852:	95 54       	subi	r25, 0x45	; 69
    1854:	93 30       	cpi	r25, 0x03	; 3
    1856:	28 f4       	brcc	.+10     	; 0x1862 <vfprintf+0xee>
    1858:	0c 5f       	subi	r16, 0xFC	; 252
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	ff e3       	ldi	r31, 0x3F	; 63
    185e:	f9 83       	std	Y+1, r31	; 0x01
    1860:	0d c0       	rjmp	.+26     	; 0x187c <vfprintf+0x108>
    1862:	83 36       	cpi	r24, 0x63	; 99
    1864:	31 f0       	breq	.+12     	; 0x1872 <vfprintf+0xfe>
    1866:	83 37       	cpi	r24, 0x73	; 115
    1868:	71 f0       	breq	.+28     	; 0x1886 <vfprintf+0x112>
    186a:	83 35       	cpi	r24, 0x53	; 83
    186c:	09 f0       	breq	.+2      	; 0x1870 <vfprintf+0xfc>
    186e:	5b c0       	rjmp	.+182    	; 0x1926 <vfprintf+0x1b2>
    1870:	22 c0       	rjmp	.+68     	; 0x18b6 <vfprintf+0x142>
    1872:	f8 01       	movw	r30, r16
    1874:	80 81       	ld	r24, Z
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	0e 5f       	subi	r16, 0xFE	; 254
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	44 24       	eor	r4, r4
    187e:	43 94       	inc	r4
    1880:	51 2c       	mov	r5, r1
    1882:	54 01       	movw	r10, r8
    1884:	15 c0       	rjmp	.+42     	; 0x18b0 <vfprintf+0x13c>
    1886:	38 01       	movw	r6, r16
    1888:	f2 e0       	ldi	r31, 0x02	; 2
    188a:	6f 0e       	add	r6, r31
    188c:	71 1c       	adc	r7, r1
    188e:	f8 01       	movw	r30, r16
    1890:	a0 80       	ld	r10, Z
    1892:	b1 80       	ldd	r11, Z+1	; 0x01
    1894:	26 ff       	sbrs	r18, 6
    1896:	03 c0       	rjmp	.+6      	; 0x189e <vfprintf+0x12a>
    1898:	65 2d       	mov	r22, r5
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <vfprintf+0x12e>
    189e:	6f ef       	ldi	r22, 0xFF	; 255
    18a0:	7f ef       	ldi	r23, 0xFF	; 255
    18a2:	c5 01       	movw	r24, r10
    18a4:	2c 87       	std	Y+12, r18	; 0x0c
    18a6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <strnlen>
    18aa:	2c 01       	movw	r4, r24
    18ac:	83 01       	movw	r16, r6
    18ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    18b0:	2f 77       	andi	r18, 0x7F	; 127
    18b2:	22 2e       	mov	r2, r18
    18b4:	17 c0       	rjmp	.+46     	; 0x18e4 <vfprintf+0x170>
    18b6:	38 01       	movw	r6, r16
    18b8:	f2 e0       	ldi	r31, 0x02	; 2
    18ba:	6f 0e       	add	r6, r31
    18bc:	71 1c       	adc	r7, r1
    18be:	f8 01       	movw	r30, r16
    18c0:	a0 80       	ld	r10, Z
    18c2:	b1 80       	ldd	r11, Z+1	; 0x01
    18c4:	26 ff       	sbrs	r18, 6
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <vfprintf+0x15a>
    18c8:	65 2d       	mov	r22, r5
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x15e>
    18ce:	6f ef       	ldi	r22, 0xFF	; 255
    18d0:	7f ef       	ldi	r23, 0xFF	; 255
    18d2:	c5 01       	movw	r24, r10
    18d4:	2c 87       	std	Y+12, r18	; 0x0c
    18d6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <strnlen_P>
    18da:	2c 01       	movw	r4, r24
    18dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18de:	20 68       	ori	r18, 0x80	; 128
    18e0:	22 2e       	mov	r2, r18
    18e2:	83 01       	movw	r16, r6
    18e4:	23 fc       	sbrc	r2, 3
    18e6:	1b c0       	rjmp	.+54     	; 0x191e <vfprintf+0x1aa>
    18e8:	83 2d       	mov	r24, r3
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	48 16       	cp	r4, r24
    18ee:	59 06       	cpc	r5, r25
    18f0:	b0 f4       	brcc	.+44     	; 0x191e <vfprintf+0x1aa>
    18f2:	b7 01       	movw	r22, r14
    18f4:	80 e2       	ldi	r24, 0x20	; 32
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    18fc:	3a 94       	dec	r3
    18fe:	f4 cf       	rjmp	.-24     	; 0x18e8 <vfprintf+0x174>
    1900:	f5 01       	movw	r30, r10
    1902:	27 fc       	sbrc	r2, 7
    1904:	85 91       	lpm	r24, Z+
    1906:	27 fe       	sbrs	r2, 7
    1908:	81 91       	ld	r24, Z+
    190a:	5f 01       	movw	r10, r30
    190c:	b7 01       	movw	r22, r14
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1914:	31 10       	cpse	r3, r1
    1916:	3a 94       	dec	r3
    1918:	f1 e0       	ldi	r31, 0x01	; 1
    191a:	4f 1a       	sub	r4, r31
    191c:	51 08       	sbc	r5, r1
    191e:	41 14       	cp	r4, r1
    1920:	51 04       	cpc	r5, r1
    1922:	71 f7       	brne	.-36     	; 0x1900 <vfprintf+0x18c>
    1924:	e5 c0       	rjmp	.+458    	; 0x1af0 <vfprintf+0x37c>
    1926:	84 36       	cpi	r24, 0x64	; 100
    1928:	11 f0       	breq	.+4      	; 0x192e <vfprintf+0x1ba>
    192a:	89 36       	cpi	r24, 0x69	; 105
    192c:	39 f5       	brne	.+78     	; 0x197c <vfprintf+0x208>
    192e:	f8 01       	movw	r30, r16
    1930:	27 ff       	sbrs	r18, 7
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <vfprintf+0x1ce>
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	0c 5f       	subi	r16, 0xFC	; 252
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	08 c0       	rjmp	.+16     	; 0x1952 <vfprintf+0x1de>
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	07 2e       	mov	r0, r23
    1948:	00 0c       	add	r0, r0
    194a:	88 0b       	sbc	r24, r24
    194c:	99 0b       	sbc	r25, r25
    194e:	0e 5f       	subi	r16, 0xFE	; 254
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	2f 76       	andi	r18, 0x6F	; 111
    1954:	72 2e       	mov	r7, r18
    1956:	97 ff       	sbrs	r25, 7
    1958:	09 c0       	rjmp	.+18     	; 0x196c <vfprintf+0x1f8>
    195a:	90 95       	com	r25
    195c:	80 95       	com	r24
    195e:	70 95       	com	r23
    1960:	61 95       	neg	r22
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	20 68       	ori	r18, 0x80	; 128
    196a:	72 2e       	mov	r7, r18
    196c:	2a e0       	ldi	r18, 0x0A	; 10
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	a4 01       	movw	r20, r8
    1972:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__ultoa_invert>
    1976:	a8 2e       	mov	r10, r24
    1978:	a8 18       	sub	r10, r8
    197a:	44 c0       	rjmp	.+136    	; 0x1a04 <vfprintf+0x290>
    197c:	85 37       	cpi	r24, 0x75	; 117
    197e:	29 f4       	brne	.+10     	; 0x198a <vfprintf+0x216>
    1980:	2f 7e       	andi	r18, 0xEF	; 239
    1982:	b2 2e       	mov	r11, r18
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	25 c0       	rjmp	.+74     	; 0x19d4 <vfprintf+0x260>
    198a:	f2 2f       	mov	r31, r18
    198c:	f9 7f       	andi	r31, 0xF9	; 249
    198e:	bf 2e       	mov	r11, r31
    1990:	8f 36       	cpi	r24, 0x6F	; 111
    1992:	c1 f0       	breq	.+48     	; 0x19c4 <vfprintf+0x250>
    1994:	18 f4       	brcc	.+6      	; 0x199c <vfprintf+0x228>
    1996:	88 35       	cpi	r24, 0x58	; 88
    1998:	79 f0       	breq	.+30     	; 0x19b8 <vfprintf+0x244>
    199a:	b4 c0       	rjmp	.+360    	; 0x1b04 <vfprintf+0x390>
    199c:	80 37       	cpi	r24, 0x70	; 112
    199e:	19 f0       	breq	.+6      	; 0x19a6 <vfprintf+0x232>
    19a0:	88 37       	cpi	r24, 0x78	; 120
    19a2:	21 f0       	breq	.+8      	; 0x19ac <vfprintf+0x238>
    19a4:	af c0       	rjmp	.+350    	; 0x1b04 <vfprintf+0x390>
    19a6:	2f 2f       	mov	r18, r31
    19a8:	20 61       	ori	r18, 0x10	; 16
    19aa:	b2 2e       	mov	r11, r18
    19ac:	b4 fe       	sbrs	r11, 4
    19ae:	0d c0       	rjmp	.+26     	; 0x19ca <vfprintf+0x256>
    19b0:	8b 2d       	mov	r24, r11
    19b2:	84 60       	ori	r24, 0x04	; 4
    19b4:	b8 2e       	mov	r11, r24
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x256>
    19b8:	24 ff       	sbrs	r18, 4
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <vfprintf+0x25c>
    19bc:	9f 2f       	mov	r25, r31
    19be:	96 60       	ori	r25, 0x06	; 6
    19c0:	b9 2e       	mov	r11, r25
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <vfprintf+0x25c>
    19c4:	28 e0       	ldi	r18, 0x08	; 8
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <vfprintf+0x260>
    19ca:	20 e1       	ldi	r18, 0x10	; 16
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x260>
    19d0:	20 e1       	ldi	r18, 0x10	; 16
    19d2:	32 e0       	ldi	r19, 0x02	; 2
    19d4:	f8 01       	movw	r30, r16
    19d6:	b7 fe       	sbrs	r11, 7
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <vfprintf+0x274>
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	0c 5f       	subi	r16, 0xFC	; 252
    19e4:	1f 4f       	sbci	r17, 0xFF	; 255
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <vfprintf+0x280>
    19e8:	60 81       	ld	r22, Z
    19ea:	71 81       	ldd	r23, Z+1	; 0x01
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 5f       	subi	r16, 0xFE	; 254
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	a4 01       	movw	r20, r8
    19f6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__ultoa_invert>
    19fa:	a8 2e       	mov	r10, r24
    19fc:	a8 18       	sub	r10, r8
    19fe:	fb 2d       	mov	r31, r11
    1a00:	ff 77       	andi	r31, 0x7F	; 127
    1a02:	7f 2e       	mov	r7, r31
    1a04:	76 fe       	sbrs	r7, 6
    1a06:	0b c0       	rjmp	.+22     	; 0x1a1e <vfprintf+0x2aa>
    1a08:	37 2d       	mov	r19, r7
    1a0a:	3e 7f       	andi	r19, 0xFE	; 254
    1a0c:	a5 14       	cp	r10, r5
    1a0e:	50 f4       	brcc	.+20     	; 0x1a24 <vfprintf+0x2b0>
    1a10:	74 fe       	sbrs	r7, 4
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <vfprintf+0x2b4>
    1a14:	72 fc       	sbrc	r7, 2
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <vfprintf+0x2b4>
    1a18:	37 2d       	mov	r19, r7
    1a1a:	3e 7e       	andi	r19, 0xEE	; 238
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <vfprintf+0x2b4>
    1a1e:	ba 2c       	mov	r11, r10
    1a20:	37 2d       	mov	r19, r7
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <vfprintf+0x2b6>
    1a24:	ba 2c       	mov	r11, r10
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <vfprintf+0x2b6>
    1a28:	b5 2c       	mov	r11, r5
    1a2a:	34 ff       	sbrs	r19, 4
    1a2c:	0d c0       	rjmp	.+26     	; 0x1a48 <vfprintf+0x2d4>
    1a2e:	fe 01       	movw	r30, r28
    1a30:	ea 0d       	add	r30, r10
    1a32:	f1 1d       	adc	r31, r1
    1a34:	80 81       	ld	r24, Z
    1a36:	80 33       	cpi	r24, 0x30	; 48
    1a38:	11 f4       	brne	.+4      	; 0x1a3e <vfprintf+0x2ca>
    1a3a:	39 7e       	andi	r19, 0xE9	; 233
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <vfprintf+0x2dc>
    1a3e:	32 ff       	sbrs	r19, 2
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <vfprintf+0x2da>
    1a42:	b3 94       	inc	r11
    1a44:	b3 94       	inc	r11
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <vfprintf+0x2dc>
    1a48:	83 2f       	mov	r24, r19
    1a4a:	86 78       	andi	r24, 0x86	; 134
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <vfprintf+0x2dc>
    1a4e:	b3 94       	inc	r11
    1a50:	33 fd       	sbrc	r19, 3
    1a52:	13 c0       	rjmp	.+38     	; 0x1a7a <vfprintf+0x306>
    1a54:	30 ff       	sbrs	r19, 0
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <vfprintf+0x2f0>
    1a58:	5a 2c       	mov	r5, r10
    1a5a:	b3 14       	cp	r11, r3
    1a5c:	18 f4       	brcc	.+6      	; 0x1a64 <vfprintf+0x2f0>
    1a5e:	53 0c       	add	r5, r3
    1a60:	5b 18       	sub	r5, r11
    1a62:	b3 2c       	mov	r11, r3
    1a64:	b3 14       	cp	r11, r3
    1a66:	68 f4       	brcc	.+26     	; 0x1a82 <vfprintf+0x30e>
    1a68:	b7 01       	movw	r22, r14
    1a6a:	80 e2       	ldi	r24, 0x20	; 32
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	3c 87       	std	Y+12, r19	; 0x0c
    1a70:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1a74:	b3 94       	inc	r11
    1a76:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a78:	f5 cf       	rjmp	.-22     	; 0x1a64 <vfprintf+0x2f0>
    1a7a:	b3 14       	cp	r11, r3
    1a7c:	10 f4       	brcc	.+4      	; 0x1a82 <vfprintf+0x30e>
    1a7e:	3b 18       	sub	r3, r11
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <vfprintf+0x310>
    1a82:	31 2c       	mov	r3, r1
    1a84:	34 ff       	sbrs	r19, 4
    1a86:	12 c0       	rjmp	.+36     	; 0x1aac <vfprintf+0x338>
    1a88:	b7 01       	movw	r22, r14
    1a8a:	80 e3       	ldi	r24, 0x30	; 48
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	3c 87       	std	Y+12, r19	; 0x0c
    1a90:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1a94:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a96:	32 ff       	sbrs	r19, 2
    1a98:	17 c0       	rjmp	.+46     	; 0x1ac8 <vfprintf+0x354>
    1a9a:	31 fd       	sbrc	r19, 1
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <vfprintf+0x330>
    1a9e:	88 e7       	ldi	r24, 0x78	; 120
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x334>
    1aa4:	88 e5       	ldi	r24, 0x58	; 88
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	0c c0       	rjmp	.+24     	; 0x1ac4 <vfprintf+0x350>
    1aac:	83 2f       	mov	r24, r19
    1aae:	86 78       	andi	r24, 0x86	; 134
    1ab0:	59 f0       	breq	.+22     	; 0x1ac8 <vfprintf+0x354>
    1ab2:	31 ff       	sbrs	r19, 1
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <vfprintf+0x346>
    1ab6:	8b e2       	ldi	r24, 0x2B	; 43
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <vfprintf+0x348>
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	37 fd       	sbrc	r19, 7
    1abe:	8d e2       	ldi	r24, 0x2D	; 45
    1ac0:	b7 01       	movw	r22, r14
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1ac8:	a5 14       	cp	r10, r5
    1aca:	38 f4       	brcc	.+14     	; 0x1ada <vfprintf+0x366>
    1acc:	b7 01       	movw	r22, r14
    1ace:	80 e3       	ldi	r24, 0x30	; 48
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1ad6:	5a 94       	dec	r5
    1ad8:	f7 cf       	rjmp	.-18     	; 0x1ac8 <vfprintf+0x354>
    1ada:	aa 94       	dec	r10
    1adc:	f4 01       	movw	r30, r8
    1ade:	ea 0d       	add	r30, r10
    1ae0:	f1 1d       	adc	r31, r1
    1ae2:	80 81       	ld	r24, Z
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1aec:	a1 10       	cpse	r10, r1
    1aee:	f5 cf       	rjmp	.-22     	; 0x1ada <vfprintf+0x366>
    1af0:	33 20       	and	r3, r3
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <vfprintf+0x382>
    1af4:	51 ce       	rjmp	.-862    	; 0x1798 <vfprintf+0x24>
    1af6:	b7 01       	movw	r22, r14
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <fputc>
    1b00:	3a 94       	dec	r3
    1b02:	f6 cf       	rjmp	.-20     	; 0x1af0 <vfprintf+0x37c>
    1b04:	f7 01       	movw	r30, r14
    1b06:	86 81       	ldd	r24, Z+6	; 0x06
    1b08:	97 81       	ldd	r25, Z+7	; 0x07
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x39c>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	2c 96       	adiw	r28, 0x0c	; 12
    1b12:	e2 e1       	ldi	r30, 0x12	; 18
    1b14:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__epilogue_restores__>

00001b18 <strnlen_P>:
    1b18:	fc 01       	movw	r30, r24
    1b1a:	05 90       	lpm	r0, Z+
    1b1c:	61 50       	subi	r22, 0x01	; 1
    1b1e:	70 40       	sbci	r23, 0x00	; 0
    1b20:	01 10       	cpse	r0, r1
    1b22:	d8 f7       	brcc	.-10     	; 0x1b1a <strnlen_P+0x2>
    1b24:	80 95       	com	r24
    1b26:	90 95       	com	r25
    1b28:	8e 0f       	add	r24, r30
    1b2a:	9f 1f       	adc	r25, r31
    1b2c:	08 95       	ret

00001b2e <strnlen>:
    1b2e:	fc 01       	movw	r30, r24
    1b30:	61 50       	subi	r22, 0x01	; 1
    1b32:	70 40       	sbci	r23, 0x00	; 0
    1b34:	01 90       	ld	r0, Z+
    1b36:	01 10       	cpse	r0, r1
    1b38:	d8 f7       	brcc	.-10     	; 0x1b30 <strnlen+0x2>
    1b3a:	80 95       	com	r24
    1b3c:	90 95       	com	r25
    1b3e:	8e 0f       	add	r24, r30
    1b40:	9f 1f       	adc	r25, r31
    1b42:	08 95       	ret

00001b44 <fputc>:
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	fb 01       	movw	r30, r22
    1b4e:	23 81       	ldd	r18, Z+3	; 0x03
    1b50:	21 fd       	sbrc	r18, 1
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <fputc+0x16>
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	9f ef       	ldi	r25, 0xFF	; 255
    1b58:	28 c0       	rjmp	.+80     	; 0x1baa <fputc+0x66>
    1b5a:	22 ff       	sbrs	r18, 2
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <fputc+0x46>
    1b5e:	46 81       	ldd	r20, Z+6	; 0x06
    1b60:	57 81       	ldd	r21, Z+7	; 0x07
    1b62:	24 81       	ldd	r18, Z+4	; 0x04
    1b64:	35 81       	ldd	r19, Z+5	; 0x05
    1b66:	42 17       	cp	r20, r18
    1b68:	53 07       	cpc	r21, r19
    1b6a:	44 f4       	brge	.+16     	; 0x1b7c <fputc+0x38>
    1b6c:	a0 81       	ld	r26, Z
    1b6e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b70:	9d 01       	movw	r18, r26
    1b72:	2f 5f       	subi	r18, 0xFF	; 255
    1b74:	3f 4f       	sbci	r19, 0xFF	; 255
    1b76:	31 83       	std	Z+1, r19	; 0x01
    1b78:	20 83       	st	Z, r18
    1b7a:	8c 93       	st	X, r24
    1b7c:	26 81       	ldd	r18, Z+6	; 0x06
    1b7e:	37 81       	ldd	r19, Z+7	; 0x07
    1b80:	2f 5f       	subi	r18, 0xFF	; 255
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	37 83       	std	Z+7, r19	; 0x07
    1b86:	26 83       	std	Z+6, r18	; 0x06
    1b88:	10 c0       	rjmp	.+32     	; 0x1baa <fputc+0x66>
    1b8a:	eb 01       	movw	r28, r22
    1b8c:	09 2f       	mov	r16, r25
    1b8e:	18 2f       	mov	r17, r24
    1b90:	00 84       	ldd	r0, Z+8	; 0x08
    1b92:	f1 85       	ldd	r31, Z+9	; 0x09
    1b94:	e0 2d       	mov	r30, r0
    1b96:	09 95       	icall
    1b98:	89 2b       	or	r24, r25
    1b9a:	e1 f6       	brne	.-72     	; 0x1b54 <fputc+0x10>
    1b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	9f 83       	std	Y+7, r25	; 0x07
    1ba4:	8e 83       	std	Y+6, r24	; 0x06
    1ba6:	81 2f       	mov	r24, r17
    1ba8:	90 2f       	mov	r25, r16
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	08 95       	ret

00001bb4 <__ultoa_invert>:
    1bb4:	fa 01       	movw	r30, r20
    1bb6:	aa 27       	eor	r26, r26
    1bb8:	28 30       	cpi	r18, 0x08	; 8
    1bba:	51 f1       	breq	.+84     	; 0x1c10 <__ultoa_invert+0x5c>
    1bbc:	20 31       	cpi	r18, 0x10	; 16
    1bbe:	81 f1       	breq	.+96     	; 0x1c20 <__ultoa_invert+0x6c>
    1bc0:	e8 94       	clt
    1bc2:	6f 93       	push	r22
    1bc4:	6e 7f       	andi	r22, 0xFE	; 254
    1bc6:	6e 5f       	subi	r22, 0xFE	; 254
    1bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bca:	8f 4f       	sbci	r24, 0xFF	; 255
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	af 4f       	sbci	r26, 0xFF	; 255
    1bd0:	b1 e0       	ldi	r27, 0x01	; 1
    1bd2:	3e d0       	rcall	.+124    	; 0x1c50 <__ultoa_invert+0x9c>
    1bd4:	b4 e0       	ldi	r27, 0x04	; 4
    1bd6:	3c d0       	rcall	.+120    	; 0x1c50 <__ultoa_invert+0x9c>
    1bd8:	67 0f       	add	r22, r23
    1bda:	78 1f       	adc	r23, r24
    1bdc:	89 1f       	adc	r24, r25
    1bde:	9a 1f       	adc	r25, r26
    1be0:	a1 1d       	adc	r26, r1
    1be2:	68 0f       	add	r22, r24
    1be4:	79 1f       	adc	r23, r25
    1be6:	8a 1f       	adc	r24, r26
    1be8:	91 1d       	adc	r25, r1
    1bea:	a1 1d       	adc	r26, r1
    1bec:	6a 0f       	add	r22, r26
    1bee:	71 1d       	adc	r23, r1
    1bf0:	81 1d       	adc	r24, r1
    1bf2:	91 1d       	adc	r25, r1
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	20 d0       	rcall	.+64     	; 0x1c38 <__ultoa_invert+0x84>
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <__ultoa_invert+0x48>
    1bfa:	68 94       	set
    1bfc:	3f 91       	pop	r19
    1bfe:	2a e0       	ldi	r18, 0x0A	; 10
    1c00:	26 9f       	mul	r18, r22
    1c02:	11 24       	eor	r1, r1
    1c04:	30 19       	sub	r19, r0
    1c06:	30 5d       	subi	r19, 0xD0	; 208
    1c08:	31 93       	st	Z+, r19
    1c0a:	de f6       	brtc	.-74     	; 0x1bc2 <__ultoa_invert+0xe>
    1c0c:	cf 01       	movw	r24, r30
    1c0e:	08 95       	ret
    1c10:	46 2f       	mov	r20, r22
    1c12:	47 70       	andi	r20, 0x07	; 7
    1c14:	40 5d       	subi	r20, 0xD0	; 208
    1c16:	41 93       	st	Z+, r20
    1c18:	b3 e0       	ldi	r27, 0x03	; 3
    1c1a:	0f d0       	rcall	.+30     	; 0x1c3a <__ultoa_invert+0x86>
    1c1c:	c9 f7       	brne	.-14     	; 0x1c10 <__ultoa_invert+0x5c>
    1c1e:	f6 cf       	rjmp	.-20     	; 0x1c0c <__ultoa_invert+0x58>
    1c20:	46 2f       	mov	r20, r22
    1c22:	4f 70       	andi	r20, 0x0F	; 15
    1c24:	40 5d       	subi	r20, 0xD0	; 208
    1c26:	4a 33       	cpi	r20, 0x3A	; 58
    1c28:	18 f0       	brcs	.+6      	; 0x1c30 <__ultoa_invert+0x7c>
    1c2a:	49 5d       	subi	r20, 0xD9	; 217
    1c2c:	31 fd       	sbrc	r19, 1
    1c2e:	40 52       	subi	r20, 0x20	; 32
    1c30:	41 93       	st	Z+, r20
    1c32:	02 d0       	rcall	.+4      	; 0x1c38 <__ultoa_invert+0x84>
    1c34:	a9 f7       	brne	.-22     	; 0x1c20 <__ultoa_invert+0x6c>
    1c36:	ea cf       	rjmp	.-44     	; 0x1c0c <__ultoa_invert+0x58>
    1c38:	b4 e0       	ldi	r27, 0x04	; 4
    1c3a:	a6 95       	lsr	r26
    1c3c:	97 95       	ror	r25
    1c3e:	87 95       	ror	r24
    1c40:	77 95       	ror	r23
    1c42:	67 95       	ror	r22
    1c44:	ba 95       	dec	r27
    1c46:	c9 f7       	brne	.-14     	; 0x1c3a <__ultoa_invert+0x86>
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	61 05       	cpc	r22, r1
    1c4c:	71 05       	cpc	r23, r1
    1c4e:	08 95       	ret
    1c50:	9b 01       	movw	r18, r22
    1c52:	ac 01       	movw	r20, r24
    1c54:	0a 2e       	mov	r0, r26
    1c56:	06 94       	lsr	r0
    1c58:	57 95       	ror	r21
    1c5a:	47 95       	ror	r20
    1c5c:	37 95       	ror	r19
    1c5e:	27 95       	ror	r18
    1c60:	ba 95       	dec	r27
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__ultoa_invert+0xa2>
    1c64:	62 0f       	add	r22, r18
    1c66:	73 1f       	adc	r23, r19
    1c68:	84 1f       	adc	r24, r20
    1c6a:	95 1f       	adc	r25, r21
    1c6c:	a0 1d       	adc	r26, r0
    1c6e:	08 95       	ret

00001c70 <__prologue_saves__>:
    1c70:	2f 92       	push	r2
    1c72:	3f 92       	push	r3
    1c74:	4f 92       	push	r4
    1c76:	5f 92       	push	r5
    1c78:	6f 92       	push	r6
    1c7a:	7f 92       	push	r7
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	ca 1b       	sub	r28, r26
    1c9a:	db 0b       	sbc	r29, r27
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	09 94       	ijmp

00001ca8 <__epilogue_restores__>:
    1ca8:	2a 88       	ldd	r2, Y+18	; 0x12
    1caa:	39 88       	ldd	r3, Y+17	; 0x11
    1cac:	48 88       	ldd	r4, Y+16	; 0x10
    1cae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cba:	b9 84       	ldd	r11, Y+9	; 0x09
    1cbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1cbe:	df 80       	ldd	r13, Y+7	; 0x07
    1cc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1cc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1cc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1cc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1cc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1cca:	b9 81       	ldd	r27, Y+1	; 0x01
    1ccc:	ce 0f       	add	r28, r30
    1cce:	d1 1d       	adc	r29, r1
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	ed 01       	movw	r28, r26
    1cdc:	08 95       	ret

00001cde <_exit>:
    1cde:	f8 94       	cli

00001ce0 <__stop_program>:
    1ce0:	ff cf       	rjmp	.-2      	; 0x1ce0 <__stop_program>
